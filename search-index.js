var searchIndex = {};
searchIndex["ruma_events"] = {"doc":"Crate ruma_events contains serializable types for the events in the [Matrix](https://matrix.org)\nspecification that can be shared by client and server code.","items":[[3,"Event","ruma_events","A basic event.",null,null],[12,"content","","Data specific to the event type.",0,null],[12,"event_type","","The type of the event.",0,null],[12,"extra_content","","Extra top-level key-value pairs specific to this event type, but that are not under the\n`content` field.",0,null],[3,"RoomEvent","","An event within the context of a room.",null,null],[12,"content","","Data specific to the event type.",1,null],[12,"event_id","","The unique identifier for the event.",1,null],[12,"extra_content","","Extra top-level key-value pairs specific to this event type, but that are not under the\n`content` field.",1,null],[12,"event_type","","The type of the event.",1,null],[12,"room_id","","The unique identifier for the room associated with this event.",1,null],[12,"unsigned","","Additional key-value pairs not signed by the homeserver.",1,null],[12,"user_id","","The unique identifier for the user associated with this event.",1,null],[3,"StateEvent","","An event that describes persistent state about a room.",null,null],[12,"content","","Data specific to the event type.",2,null],[12,"event_id","","The unique identifier for the event.",2,null],[12,"event_type","","The type of the event.",2,null],[12,"extra_content","","Extra top-level key-value pairs specific to this event type, but that are not under the\n`content` field.",2,null],[12,"prev_content","","The previous content for this state key, if any.",2,null],[12,"room_id","","The unique identifier for the room associated with this event.",2,null],[12,"state_key","","A key that determines which piece of room state the event represents.",2,null],[12,"unsigned","","Additional key-value pairs not signed by the homeserver.",2,null],[12,"user_id","","The unique identifier for the user associated with this event.",2,null],[4,"EventType","","The type of an event.",null,null],[13,"CallAnswer","","m.call.answer",3,null],[13,"CallCandidates","","m.call.candidates",3,null],[13,"CallHangup","","m.call.hangup",3,null],[13,"CallInvite","","m.call.invite",3,null],[13,"Presence","","m.presence",3,null],[13,"Receipt","","m.receipt",3,null],[13,"RoomAliases","","m.room.aliases",3,null],[13,"RoomAvatar","","m.room.avatar",3,null],[13,"RoomCanonicalAlias","","m.room.canonical_alias",3,null],[13,"RoomCreate","","m.room.create",3,null],[13,"RoomGuestAccess","","m.room.guest_access",3,null],[13,"RoomHistoryVisibility","","m.room.history_visibility",3,null],[13,"RoomJoinRules","","m.room.join_rules",3,null],[13,"RoomMember","","m.room.member",3,null],[13,"RoomMessage","","m.room.message",3,null],[13,"RoomName","","m.room.name",3,null],[13,"RoomPowerLevels","","m.room.power_levels",3,null],[13,"RoomRedaction","","m.room.redaction",3,null],[13,"RoomThirdPartyInvite","","m.room.third_party_invite",3,null],[13,"RoomTopic","","m.room.topic",3,null],[13,"Tag","","m.tag",3,null],[13,"Typing","","m.typing",3,null],[13,"Custom","","Any event that is not part of the specification.",3,null],[0,"call","","Modules for events in the *m.call* namespace.",null,null],[3,"SessionDescription","ruma_events::call","A VoIP session description.",null,null],[12,"session_type","","The type of session description.",4,null],[12,"sdp","","The SDP text of the session description.",4,null],[4,"SessionDescriptionType","","The type of VoIP session description.",null,null],[13,"Answer","","An answer.",5,null],[13,"Offer","","An offer.",5,null],[0,"answer","","Types for the *m.call.answer* event.",null,null],[3,"AnswerEventContent","ruma_events::call::answer","The payload of an `AnswerEvent`.",null,null],[12,"answer","","The VoIP session description.",6,null],[12,"call_id","","The ID of the call this event relates to.",6,null],[12,"version","","The version of the VoIP specification this messages adheres to.",6,null],[6,"AnswerEvent","","This event is sent by the callee when they wish to answer the call.",null,null],[11,"fmt","","",6,null],[0,"candidates","ruma_events::call","Types for the *m.call.candidates* event.",null,null],[3,"CandidatesEventContent","ruma_events::call::candidates","The payload of a `CandidatesEvent`.",null,null],[12,"call_id","","The ID of the call this event relates to.",7,null],[12,"candidates","","A list of candidates.",7,null],[12,"version","","The version of the VoIP specification this messages adheres to.",7,null],[3,"Candidate","","An ICE (Interactive Connectivity Establishment) candidate.",null,null],[12,"candidate","","The SDP &quot;a&quot; line of the candidate.",8,null],[12,"sdp_mid","","The SDP media type this candidate is intended for.",8,null],[12,"sdp_m_line_index","","The index of the SDP &quot;m&quot; line this candidate is intended for.",8,null],[6,"CandidatesEvent","","This event is sent by callers after sending an invite and by the callee after answering.\nIts purpose is to give the other party additional ICE candidates to try using to communicate.",null,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[0,"hangup","ruma_events::call","Types for the *m.call.hangup* event.",null,null],[3,"HangupEventContent","ruma_events::call::hangup","The payload of a `HangupEvent`.",null,null],[12,"call_id","","The ID of the call this event relates to.",9,null],[12,"version","","The version of the VoIP specification this messages adheres to.",9,null],[6,"HangupEvent","","Sent by either party to signal their termination of the call. This can be sent either once the\ncall has has been established or before to abort the call.",null,null],[11,"fmt","","",9,null],[0,"invite","ruma_events::call","Types for the *m.call.invite* event.",null,null],[3,"InviteEventContent","ruma_events::call::invite","The payload of an `InviteEvent`.",null,null],[12,"call_id","","A unique identifer for the call.",10,null],[12,"lifetime","","The time in milliseconds that the invite is valid for. Once the invite age exceeds this\nvalue, clients should discard it. They should also no longer show the call as awaiting an\nanswer in the UI.",10,null],[12,"offer","","The session description object.",10,null],[12,"version","","The version of the VoIP specification this messages adheres to.",10,null],[6,"InviteEvent","","This event is sent by the caller when they wish to establish a call.",null,null],[11,"fmt","","",10,null],[11,"fmt","ruma_events::call","",4,null],[11,"fmt","","",5,null],[0,"presence","ruma_events","Types for the *m.presence* event.",null,null],[3,"PresenceEventContent","ruma_events::presence","The payload of a `PresenceEvent`.",null,null],[12,"avatar_url","","The current avatar URL for this user.",11,null],[12,"currently_active","","Whether or not the user is currently active.",11,null],[12,"displayname","","The current display name for this user.",11,null],[12,"last_active_ago","","The last time since this used performed some action, in milliseconds.",11,null],[12,"presence","","The presence state for this user.",11,null],[12,"user_id","","The unique identifier for the user associated with this event.",11,null],[3,"PresenceEventExtraContent","","Extra content for a `PresenceEvent`.",null,null],[12,"event_id","","The unique identifier for the event.",12,null],[4,"PresenceState","","A description of a user&#39;s connectivity and availability for chat.",null,null],[13,"FreeForChat","","Connected to the service and available for chat.",13,null],[13,"Hidden","","Connected to the service but not visible to other users.",13,null],[13,"Offline","","Disconnected from the service.",13,null],[13,"Online","","Connected to the service.",13,null],[13,"Unavailable","","Connected to the service but not available for chat.",13,null],[6,"PresenceEvent","","Informs the client of a user&#39;s presence state change.",null,null],[11,"fmt","","",11,null],[11,"fmt","","",13,null],[11,"fmt","","",12,null],[0,"receipt","ruma_events","Types for the *m.receipt* event.",null,null],[3,"Receipts","ruma_events::receipt","A collection of receipts.",null,null],[12,"m_read","","A collection of users who have sent *m.read* receipts for this event.",14,null],[3,"Receipt","","An acknowledgement of an event.",null,null],[12,"ts","","The timestamp the receipt was sent at.",15,null],[3,"ReceiptEventExtraContent","","Extra content for a `PresenceEvent`.",null,null],[12,"room_id","","The unique identifier for the room associated with this event.",16,null],[6,"ReceiptEvent","","Informs the client of new receipts.",null,null],[6,"ReceiptEventContent","","The payload of a `ReceiptEvent`.",null,null],[6,"UserReceipts","","A mapping of user ID to receipt.",null,null],[11,"fmt","","",14,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[0,"room","ruma_events","Modules for events in the *m.room* namespace.",null,null],[3,"ImageInfo","ruma_events::room","Metadata about an image.",null,null],[12,"height","","The height of the image in pixels.",17,null],[12,"mimetype","","The MIME type of the image, e.g. &quot;image/png.&quot;",17,null],[12,"size","","The file size of the image in bytes.",17,null],[12,"width","","The width of the image in pixels.",17,null],[0,"aliases","","Types for the *m.room.aliases* event.",null,null],[3,"AliasesEventContent","ruma_events::room::aliases","The payload of an `AliasesEvent`.",null,null],[12,"aliases","","A list of room aliases.",18,null],[6,"AliasesEvent","","Informs the room about what room aliases it has been given.",null,null],[11,"fmt","","",18,null],[0,"avatar","ruma_events::room","Types for the *m.room.avatar* event.",null,null],[3,"AvatarEventContent","ruma_events::room::avatar","The payload of an `AvatarEvent`.",null,null],[12,"info","","Information about the avatar image.",19,null],[12,"thumbnail_info","","Information about the avatar thumbnail image.",19,null],[12,"thumbnail_url","","URL of the avatar thumbnail image.",19,null],[12,"url","","URL of the avatar image.",19,null],[6,"AvatarEvent","","A picture that is associated with the room.",null,null],[11,"fmt","","",19,null],[0,"canonical_alias","ruma_events::room","Types for the *m.room.canonical_alias* event.",null,null],[3,"CanonicalAliasEventContent","ruma_events::room::canonical_alias","The payload of a `CanonicalAliasEvent`.",null,null],[12,"alias","","The canonical alias.",20,null],[6,"CanonicalAliasEvent","","Informs the room as to which alias is the canonical one.",null,null],[11,"fmt","","",20,null],[0,"create","ruma_events::room","Types for the *m.room.create* event.",null,null],[3,"CreateEventContent","ruma_events::room::create","The payload of a `CreateEvent`.",null,null],[12,"creator","","The `user_id` of the room creator. This is set by the homeserver.",21,null],[12,"federate","","Whether or not this room&#39;s data should be transferred to other homeservers.",21,null],[6,"CreateEvent","","This is the first event in a room and cannot be changed. It acts as the root of all other\nevents.",null,null],[11,"fmt","","",21,null],[0,"guest_access","ruma_events::room","Types for the *m.room.guest_access* event.",null,null],[3,"GuestAccessEventContent","ruma_events::room::guest_access","The payload of a `GuestAccessEvent`.",null,null],[12,"guest_access","","A policy for guest user access to a room.",22,null],[4,"GuestAccess","","A policy for guest user access to a room.",null,null],[13,"CanJoin","","Guests are allowed to join the room.",23,null],[13,"Forbidden","","Guests are not allowed to join the room.",23,null],[6,"GuestAccessEvent","","Controls whether guest users are allowed to join rooms.",null,null],[11,"fmt","","",22,null],[11,"fmt","","",23,null],[0,"history_visibility","ruma_events::room","Types for the *m.room.history_visibility* event.",null,null],[3,"HistoryVisibilityEventContent","ruma_events::room::history_visibility","The payload of a `HistoryVisibilityEvent`.",null,null],[12,"history_visibility","","Who can see the room history.",24,null],[4,"HistoryVisibility","","Who can see a room&#39;s history.",null,null],[13,"Invited","","Previous events are accessible to newly joined members from the point they were invited\nonwards. Events stop being accessible when the member&#39;s state changes to something other\nthan *invite* or *join*.",25,null],[13,"Joined","","Previous events are accessible to newly joined members from the point they joined the room\nonwards. Events stop being accessible when the member&#39;s state changes to something other\nthan *join*.",25,null],[13,"Shared","","Previous events are always accessible to newly joined members. All events in the room are\naccessible, even those sent when the member was not a part of the room.",25,null],[13,"WorldReadable","","All events while this is the `HistoryVisibility` value may be shared by any\nparticipating homeserver with anyone, regardless of whether they have ever joined the room.",25,null],[6,"HistoryVisibilityEvent","","This event controls whether a member of a room can see the events that happened in a room from\nbefore they joined.",null,null],[11,"fmt","","",24,null],[11,"fmt","","",25,null],[0,"join_rules","ruma_events::room","Types for the *m.room.join_rules* event.",null,null],[3,"JoinRulesEventContent","ruma_events::room::join_rules","The payload of a `JoinRulesEvent`.",null,null],[12,"join_rule","","The type of rules used for users wishing to join this room.",26,null],[4,"JoinRule","","The rule used for users wishing to join this room.",null,null],[13,"Invite","","A user who wishes to join the room must first receive an invite to the room from someone\nalready inside of the room.",27,null],[13,"Knock","","Reserved but not yet implemented by the Matrix specification.",27,null],[13,"Private","","Reserved but not yet implemented by the Matrix specification.",27,null],[13,"Public","","Anyone can join the room without any prior action.",27,null],[6,"JoinRulesEvent","","Describes how users are allowed to join the room.",null,null],[11,"fmt","","",26,null],[11,"fmt","","",27,null],[0,"member","ruma_events::room","Types for the *m.room.member* event.",null,null],[3,"MemberEventContent","ruma_events::room::member","The payload of a `MemberEvent`.",null,null],[12,"avatar_url","","The avatar URL for this user.",28,null],[12,"displayname","","The display name for this user.",28,null],[12,"membership","","The membership state of this user.",28,null],[12,"third_party_invite","","Warning: This field is not implemented yet and its type will change!",28,null],[3,"MemberEventExtraContent","","Extra content for a `MemberEvent`.",null,null],[12,"invite_room_state","","A subset of the state of the room at the time of the invite.",29,null],[4,"MembershipState","","The membership state of a user.",null,null],[13,"Ban","","The user is banned.",30,null],[13,"Invite","","The user has been invited.",30,null],[13,"Join","","The user has joined.",30,null],[13,"Knock","","The user has requested to join.",30,null],[13,"Leave","","The user has left.",30,null],[6,"MemberEvent","","The current membership state of a user in the room.",null,null],[11,"fmt","","",28,null],[11,"fmt","","",30,null],[11,"fmt","","",29,null],[0,"message","ruma_events::room","Types for the *m.room.message* event.",null,null],[3,"AudioMessageEventContent","ruma_events::room::message","The payload of an audio message.",null,null],[12,"body","","The textual representation of this message.",31,null],[12,"info","","Metadata for the audio clip referred to in `url`.",31,null],[12,"msgtype","","The message type. Always *m.audio*.",31,null],[12,"url","","The URL to the audio clip.",31,null],[3,"AudioInfo","","Metadata about an audio clip.",null,null],[12,"duration","","The duration of the audio in milliseconds.",32,null],[12,"mimetype","","The mimetype of the audio, e.g. &quot;audio/aac.&quot;",32,null],[12,"size","","The size of the audio clip in bytes.",32,null],[3,"EmoteMessageEventContent","","The payload of an emote message.",null,null],[12,"body","","The emote action to perform.",33,null],[12,"msgtype","","The message type. Always *m.emote*.",33,null],[3,"FileMessageEventContent","","The payload of a file message.",null,null],[12,"body","","A human-readable description of the file. This is recommended to be the filename of the\noriginal upload.",34,null],[12,"info","","Metadata about the file referred to in `url`.",34,null],[12,"msgtype","","The message type. Always *m.file*.",34,null],[12,"thumbnail_info","","Metadata about the image referred to in `thumbnail_url`.",34,null],[12,"thumbnail_url","","The URL to the thumbnail of the file.",34,null],[12,"url","","The URL to the file.",34,null],[3,"FileInfo","","Metadata about a file.",null,null],[12,"mimetype","","The mimetype of the file, e.g. &quot;application/msword.&quot;",35,null],[12,"size","","The size of the file in bytes.",35,null],[3,"ImageMessageEventContent","","The payload of an image message.",null,null],[12,"body","","A textual representation of the image. This could be the alt text of the image, the filename\nof the image, or some kind of content description for accessibility e.g. &quot;image attachment.&quot;",36,null],[12,"info","","Metadata about the image referred to in `url`.",36,null],[12,"msgtype","","The message type. Always *m.image*.",36,null],[12,"thumbnail_info","","Metadata about the image referred to in `thumbnail_url`.",36,null],[12,"thumbnail_url","","The URL to the thumbnail of the image.",36,null],[12,"url","","The URL to the image.",36,null],[3,"LocationMessageEventContent","","The payload of a location message.",null,null],[12,"body","","A description of the location e.g. &quot;Big Ben, London, UK,&quot;or some kind of content description\nfor accessibility, e.g. &quot;location attachment.&quot;",37,null],[12,"geo_uri","","A geo URI representing the location.",37,null],[12,"msgtype","","The message type. Always *m.location*.",37,null],[12,"thumbnail_info","","Metadata about the image referred to in `thumbnail_url`.",37,null],[12,"thumbnail_url","","The URL to a thumbnail of the location being represented.",37,null],[3,"NoticeMessageEventContent","","The payload of a notice message.",null,null],[12,"body","","The notice text to send.",38,null],[12,"msgtype","","The message type. Always *m.notice*.",38,null],[3,"TextMessageEventContent","","The payload of a text message.",null,null],[12,"body","","The body of the message.",39,null],[12,"msgtype","","The message type. Always *m.text*.",39,null],[3,"VideoMessageEventContent","","The payload of a video message.",null,null],[12,"body","","A description of the video, e.g. &quot;Gangnam Style,&quot; or some kind of content description for\naccessibility, e.g. &quot;video attachment.&quot;",40,null],[12,"info","","Metadata about the video clip referred to in `url`.",40,null],[12,"msgtype","","The message type. Always *m.video*.",40,null],[12,"url","","The URL to the video clip.",40,null],[3,"VideoInfo","","Metadata about a video.",null,null],[12,"duration","","The duration of the video in milliseconds.",41,null],[12,"h","","The height of the video in pixels.",41,null],[12,"mimetype","","The mimetype of the video, e.g. &quot;video/mp4.&quot;",41,null],[12,"size","","The size of the video in bytes.",41,null],[12,"thumbnail_info","","Metadata about an image.",41,null],[12,"thumbnail_url","","The URL to a thumbnail of the video clip.",41,null],[12,"w","","The width of the video in pixels.",41,null],[4,"MessageType","","The message type of message event, e.g. `m.image` or `m.text`.",null,null],[13,"Audio","","An audio message.",42,null],[13,"Emote","","An emote message.",42,null],[13,"File","","A file message.",42,null],[13,"Image","","An image message.",42,null],[13,"Location","","A location message.",42,null],[13,"Notice","","A notice message.",42,null],[13,"Text","","A text message.",42,null],[13,"Video","","A video message.",42,null],[4,"MessageEventContent","","The payload of a message event.",null,null],[13,"Audio","","An audio message.",43,null],[13,"Emote","","An emote message.",43,null],[13,"File","","An file message.",43,null],[13,"Image","","An image message.",43,null],[13,"Location","","An location message.",43,null],[13,"Notice","","An notice message.",43,null],[13,"Text","","An text message.",43,null],[13,"Video","","An video message.",43,null],[6,"MessageEvent","","A message sent to a room.",null,null],[11,"fmt","","",42,null],[11,"fmt","","",43,null],[11,"fmt","","",31,null],[11,"fmt","","",32,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"fmt","","",37,null],[11,"fmt","","",38,null],[11,"fmt","","",39,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[0,"name","ruma_events::room","Types for the *m.room.name* event.",null,null],[3,"NameEventContent","ruma_events::room::name","The payload of a `NameEvent`.",null,null],[12,"name","","The name of the room. This MUST NOT exceed 255 bytes.",44,null],[6,"NameEvent","","A human-friendly room name designed to be displayed to the end-user.",null,null],[11,"fmt","","",44,null],[0,"power_levels","ruma_events::room","Types for the *m.room.power_levels* event.",null,null],[3,"PowerLevelsEventContent","ruma_events::room::power_levels","The payload of a `PowerLevelsEvent`.",null,null],[12,"ban","","The level required to ban a user.",45,null],[12,"events","","The level required to send specific event types.",45,null],[12,"events_default","","The default level required to send message events.",45,null],[12,"invite","","The level required to invite a user.",45,null],[12,"kick","","The level required to kick a user.",45,null],[12,"redact","","The level required to redact an event.",45,null],[12,"state_default","","The default level required to send state events.",45,null],[12,"users","","The power levels for specific users.",45,null],[12,"users_default","","The default power level for every user in the room.",45,null],[6,"PowerLevelsEvent","","Defines the power levels (privileges) of users in the room.",null,null],[11,"fmt","","",45,null],[0,"redaction","ruma_events::room","Types for the *m.room.redaction* event.",null,null],[3,"RedactionEventContent","ruma_events::room::redaction","The payload of a `RedactionEvent`.",null,null],[12,"reason","","The reason for the redaction, if any.",46,null],[3,"RedactionEventExtraContent","","Extra content for a `RedactionEvent`.",null,null],[12,"redacts","","The ID of the event that was redacted.",47,null],[6,"RedactionEvent","","A redaction of an event.",null,null],[11,"fmt","","",46,null],[11,"fmt","","",47,null],[0,"third_party_invite","ruma_events::room","Types for the *m.room.third_party_invite* event.",null,null],[3,"ThirdPartyInviteEventContent","ruma_events::room::third_party_invite","The payload of a `ThirdPartyInviteEvent`.",null,null],[12,"display_name","","A user-readable string which represents the user who has been invited.",48,null],[12,"key_validity_url","","A URL which can be fetched to validate whether the key has been revoked.",48,null],[12,"public_key","","A Base64-encoded Ed25519 key with which the token must be signed.",48,null],[12,"public_keys","","Keys with which the token may be signed.",48,null],[3,"PublicKey","","A public key for signing a third party invite token.",null,null],[12,"key_validity_url","","An optional URL which can be fetched to validate whether the key has been revoked.",49,null],[12,"public_key","","A Base64-encoded Ed25519 key with which the token must be signed.",49,null],[6,"ThirdPartyInviteEvent","","An invitation to a room issued to a third party identifier, rather than a matrix user ID.",null,null],[11,"fmt","","",48,null],[11,"fmt","","",49,null],[0,"topic","ruma_events::room","Types for the *m.room.topic* event.",null,null],[3,"TopicEventContent","ruma_events::room::topic","The payload of a `TopicEvent`.",null,null],[12,"topic","","The topic text.",50,null],[6,"TopicEvent","","A topic is a short message detailing what is currently being discussed in the room.",null,null],[11,"fmt","","",50,null],[11,"fmt","ruma_events::room","",17,null],[0,"stripped","ruma_events","Stripped-down versions of certain state events.",null,null],[3,"StrippedStateContent","ruma_events::stripped","The general form of a `StrippedState`.",null,null],[12,"content","","Data specific to the event type.",51,null],[12,"event_type","","The type of the event.",51,null],[12,"state_key","","A key that determines which piece of room state the event represents.",51,null],[4,"StrippedState","","A stripped-down version of a state event that is included along with some other events.",null,null],[13,"RoomAvatar","","A stripped-down version of the *m.room.avatar* event.",52,null],[13,"RoomCanonicalAlias","","A stripped-down version of the *m.room.canonical_alias* event.",52,null],[13,"RoomJoinRules","","A stripped-down version of the *m.room.join_rules* event.",52,null],[13,"RoomName","","A stripped-down version of the *m.room.name* event.",52,null],[6,"StrippedRoomAvatar","","A stripped-down version of the *m.room.avatar* event.",null,null],[6,"StrippedRoomCanonicalAlias","","A stripped-down version of the *m.room.canonical_alias* event.",null,null],[6,"StrippedRoomJoinRules","","A stripped-down version of the *m.room.join_rules* event.",null,null],[6,"StrippedRoomName","","A stripped-down version of the *m.room.name* event.",null,null],[11,"fmt","","",52,null],[11,"fmt","","",51,null],[0,"tag","ruma_events","Types for the *m.tag* event.",null,null],[3,"TagEventContent","ruma_events::tag","The payload of a `TagEvent`.",null,null],[12,"tags","","A map of tag names to tag info.",53,null],[3,"TagInfo","","Information about a tag.",null,null],[12,"order","","Value to use for lexicographically ordering rooms with this tag.",54,null],[6,"TagEvent","","Informs the client of tags on a room.",null,null],[11,"fmt","","",53,null],[11,"fmt","","",54,null],[0,"typing","ruma_events","Types for the *m.typing* event.",null,null],[3,"TypingEventContent","ruma_events::typing","The payload of a `TypingEvent`.",null,null],[12,"user_ids","","The list of user IDs typing in this room, if any.",55,null],[3,"TypingEventExtraContent","","Extra content for a `TypingEvent`.",null,null],[12,"room_id","","The unique identifier for the room associated with this event.",56,null],[6,"TypingEvent","","Informs the client of the list of users currently typing.",null,null],[11,"fmt","","",55,null],[11,"fmt","","",56,null],[11,"fmt","ruma_events","",3,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Event"],[3,"RoomEvent"],[3,"StateEvent"],[4,"EventType"],[3,"SessionDescription"],[4,"SessionDescriptionType"],[3,"AnswerEventContent"],[3,"CandidatesEventContent"],[3,"Candidate"],[3,"HangupEventContent"],[3,"InviteEventContent"],[3,"PresenceEventContent"],[3,"PresenceEventExtraContent"],[4,"PresenceState"],[3,"Receipts"],[3,"Receipt"],[3,"ReceiptEventExtraContent"],[3,"ImageInfo"],[3,"AliasesEventContent"],[3,"AvatarEventContent"],[3,"CanonicalAliasEventContent"],[3,"CreateEventContent"],[3,"GuestAccessEventContent"],[4,"GuestAccess"],[3,"HistoryVisibilityEventContent"],[4,"HistoryVisibility"],[3,"JoinRulesEventContent"],[4,"JoinRule"],[3,"MemberEventContent"],[3,"MemberEventExtraContent"],[4,"MembershipState"],[3,"AudioMessageEventContent"],[3,"AudioInfo"],[3,"EmoteMessageEventContent"],[3,"FileMessageEventContent"],[3,"FileInfo"],[3,"ImageMessageEventContent"],[3,"LocationMessageEventContent"],[3,"NoticeMessageEventContent"],[3,"TextMessageEventContent"],[3,"VideoMessageEventContent"],[3,"VideoInfo"],[4,"MessageType"],[4,"MessageEventContent"],[3,"NameEventContent"],[3,"PowerLevelsEventContent"],[3,"RedactionEventContent"],[3,"RedactionEventExtraContent"],[3,"ThirdPartyInviteEventContent"],[3,"PublicKey"],[3,"TopicEventContent"],[3,"StrippedStateContent"],[4,"StrippedState"],[3,"TagEventContent"],[3,"TagInfo"],[3,"TypingEventContent"],[3,"TypingEventExtraContent"]]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,null],[11,"push","","Insert a value into the array.",0,null],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,null],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,null],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,null],[11,"insert","","Insert a key-value pair into the object.",1,null],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,null],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,null],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,null],[11,"deserialize","","",2,null],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,null],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"visit_variant","","",2,null],[11,"visit_unit","","",2,null],[11,"visit_newtype","","",2,null],[11,"visit_tuple","","",2,null],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_bytes","","DEPRECATED. Will be removed in 0.8.0.\nhttps://github.com/serde-rs/json/issues/60",null,null],[5,"escape_str","","Serializes and escapes a `&amp;str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a &#39;{&#39; or &#39;[&#39;.",6,null],[10,"comma","","Called when serializing a &#39;,&#39;.",6,null],[10,"colon","","Called when serializing a &#39;:&#39;.",6,null],[10,"close","","Called when serializing a &#39;}&#39; or &#39;]&#39;.",6,null],[11,"new","","Creates a new JSON serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,null],[11,"serialize_bool","","",7,null],[11,"serialize_isize","","",7,null],[11,"serialize_i8","","",7,null],[11,"serialize_i16","","",7,null],[11,"serialize_i32","","",7,null],[11,"serialize_i64","","",7,null],[11,"serialize_usize","","",7,null],[11,"serialize_u8","","",7,null],[11,"serialize_u16","","",7,null],[11,"serialize_u32","","",7,null],[11,"serialize_u64","","",7,null],[11,"serialize_f32","","",7,null],[11,"serialize_f64","","",7,null],[11,"serialize_char","","",7,null],[11,"serialize_str","","",7,null],[11,"serialize_none","","",7,null],[11,"serialize_some","","",7,null],[11,"serialize_unit","","",7,null],[11,"serialize_newtype_struct","","Override `visit_newtype_struct` to serialize newtypes without an object wrapper.",7,null],[11,"serialize_unit_variant","","",7,null],[11,"serialize_newtype_variant","","",7,null],[11,"serialize_seq","","",7,null],[11,"serialize_tuple_variant","","",7,null],[11,"serialize_seq_elt","","",7,null],[11,"serialize_map","","",7,null],[11,"serialize_struct_variant","","",7,null],[11,"serialize_map_elt","","",7,null],[11,"open","","",8,null],[11,"comma","","",8,null],[11,"colon","","",8,null],[11,"close","","",8,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",9,null],[11,"open","","",9,null],[11,"comma","","",9,null],[11,"colon","","",9,null],[11,"close","","",9,null],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the IntoIter type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",11,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",10,null],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","**Deprecated**: Use `Value.pointer()` and pointer syntax instead.",10,null],[11,"pointer","","Looks up a value by a JSON Pointer.",10,null],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",10,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",10,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",10,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",10,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",10,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,null],[11,"as_string","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",10,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",10,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",10,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",10,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,null],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",10,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",10,null],[11,"serialize","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,null],[11,"fmt","","Serializes a json value into a string",10,null],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",12,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",12,null],[11,"serialize_bool","","",12,null],[11,"serialize_i64","","",12,null],[11,"serialize_u64","","",12,null],[11,"serialize_f64","","",12,null],[11,"serialize_char","","",12,null],[11,"serialize_str","","",12,null],[11,"serialize_none","","",12,null],[11,"serialize_some","","",12,null],[11,"serialize_unit","","",12,null],[11,"serialize_unit_variant","","",12,null],[11,"serialize_newtype_variant","","",12,null],[11,"serialize_seq","","",12,null],[11,"serialize_tuple_variant","","",12,null],[11,"serialize_seq_elt","","",12,null],[11,"serialize_map","","",12,null],[11,"serialize_struct_variant","","",12,null],[11,"serialize_map_elt","","",12,null],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",13,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_newtype_struct","","",13,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","serde::core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"fmt","core::hash::sip","",106,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"clone","","",106,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",107,null],[11,"build_hasher","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",108,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",109,null],[11,"finish","","Finishes output and returns any error encountered.",109,null],[11,"field","","Adds a new field to the generated tuple struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"entry","","Adds a new entry to the set output.",111,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the list output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the map output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"partial_cmp","core::fmt","",114,null],[11,"eq","","",114,null],[11,"cmp","","",114,null],[11,"hash","","",114,null],[11,"default","","",114,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"clone","","",115,null],[11,"fmt","","",115,null],[11,"fmt","","",115,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",116,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",116,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",116,null],[11,"write_fmt","","Writes some formatted information into this instance",116,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",116,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",116,null],[11,"align","","Flag indicating what form of alignment was requested",116,null],[11,"width","","Optionally specified integer width that the output should be",116,null],[11,"precision","","Optionally specified precision for numeric types",116,null],[11,"sign_plus","","Determines if the `+` flag was specified.",116,null],[11,"sign_minus","","Determines if the `-` flag was specified.",116,null],[11,"alternate","","Determines if the `#` flag was specified.",116,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",116,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",116,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",116,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",116,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",116,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",116,null],[11,"write_str","","",116,null],[11,"write_char","","",116,null],[11,"write_fmt","","",116,null],[11,"fmt","","",114,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",117,null],[11,"write_u8","","Write a single `u8` into this hasher",118,null],[11,"write_u16","","Write a single `u16` into this hasher.",118,null],[11,"write_u32","","Write a single `u32` into this hasher.",118,null],[11,"write_u64","","Write a single `u64` into this hasher.",118,null],[11,"write_usize","","Write a single `usize` into this hasher.",118,null],[11,"write_i8","","Write a single `i8` into this hasher.",118,null],[11,"write_i16","","Write a single `i16` into this hasher.",118,null],[11,"write_i32","","Write a single `i32` into this hasher.",118,null],[11,"write_i64","","Write a single `i64` into this hasher.",118,null],[11,"write_isize","","Write a single `isize` into this hasher.",118,null],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",119,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",119,null],[11,"ne","serde::core::cmp","This method tests for `!=`.",120,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",121,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",121,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",121,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",121,null],[11,"clone","rustc_unicode::u_str","",122,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",122,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next","","",123,null],[11,"next_back","","",123,null],[11,"next","rustc_unicode::char","",124,null],[11,"next","","",125,null],[11,"clone","","",126,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",127,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",127,null],[11,"fmt","","",127,null],[11,"drop","collections::binary_heap","",128,null],[11,"deref","","",128,null],[11,"deref_mut","","",128,null],[11,"clone","","",129,null],[11,"clone_from","","",129,null],[11,"default","","",129,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",129,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",129,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",129,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",129,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",129,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",129,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",129,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",129,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",129,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",129,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",129,null],[11,"push","","Pushes an item onto the binary heap.",129,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",129,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",129,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",129,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",129,null],[11,"len","","Returns the length of the binary heap.",129,null],[11,"is_empty","","Checks if the binary heap is empty.",129,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",129,null],[11,"clear","","Drops all items from the binary heap.",129,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",129,null],[11,"clone","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"from","","",129,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",133,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",129,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",129,null],[11,"extend","","",129,null],[11,"extend","","",129,null],[11,"drop","collections::btree::map","",134,null],[11,"clone","","",134,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",134,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",134,null],[11,"get","","Returns a reference to the value corresponding to the key.",134,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",134,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",134,null],[11,"insert","","Inserts a key-value pair into the map.",134,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",134,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",134,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",134,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",134,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",134,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next_back","","",135,null],[11,"len","","",135,null],[11,"clone","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"len","","",136,null],[11,"into_iter","","",134,null],[11,"drop","","",137,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"len","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"len","","",138,null],[11,"clone","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next_back","","",139,null],[11,"len","","",139,null],[11,"clone","","",139,null],[11,"next","","",140,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"next_back","","",141,null],[11,"len","","",141,null],[11,"next_back","","",140,null],[11,"clone","","",140,null],[11,"next","","",142,null],[11,"next_back","","",142,null],[11,"from_iter","","",134,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"hash","","",134,null],[11,"default","","",134,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"fmt","","",134,null],[11,"index","","",134,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",134,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",134,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",134,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",134,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",134,null],[11,"len","","Returns the number of elements in the map.",134,null],[11,"is_empty","","Returns true if the map contains no elements.",134,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",143,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",143,null],[11,"key","","Returns a reference to this entry&#39;s key.",143,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",144,null],[11,"into_key","","Take ownership of the key.",144,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",144,null],[11,"key","","Gets a reference to the key in the entry.",145,null],[11,"remove_pair","","Take ownership of the key and value from the map.",145,null],[11,"get","","Gets a reference to the value in the entry.",145,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",145,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",145,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",145,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",145,null],[11,"partial_cmp","collections::btree::set","",146,null],[11,"lt","","",146,null],[11,"le","","",146,null],[11,"gt","","",146,null],[11,"ge","","",146,null],[11,"cmp","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"hash","","",146,null],[11,"clone","","",146,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",146,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",146,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",146,null],[11,"difference","","Visits the values representing the difference, in ascending order.",146,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",146,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",146,null],[11,"union","","Visits the values representing the union, in ascending order.",146,null],[11,"len","","Returns the number of elements in the set.",146,null],[11,"is_empty","","Returns true if the set contains no elements.",146,null],[11,"clear","","Clears the set, removing all values.",146,null],[11,"contains","","Returns `true` if the set contains a value.",146,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",146,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",146,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",146,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",146,null],[11,"insert","","Adds a value to the set.",146,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",146,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",146,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",146,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",146,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",146,null],[11,"from_iter","","",146,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",146,null],[11,"extend","","",146,null],[11,"extend","","",146,null],[11,"default","","",146,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",146,null],[11,"clone","","",147,null],[11,"next","","",147,null],[11,"size_hint","","",147,null],[11,"next_back","","",147,null],[11,"len","","",147,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"len","","",148,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"next_back","","",149,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"borrow","collections::borrow","",154,null],[11,"clone","","",154,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",154,null],[11,"into_owned","","Extracts the owned data.",154,null],[11,"deref","","",154,null],[11,"cmp","","",154,null],[11,"eq","","",154,null],[11,"partial_cmp","","",154,null],[11,"fmt","","",154,null],[11,"fmt","","",154,null],[11,"hash","","",154,null],[11,"as_ref","","",154,null],[11,"hash","collections::enum_set","",155,null],[11,"cmp","","",155,null],[11,"partial_cmp","","",155,null],[11,"lt","","",155,null],[11,"le","","",155,null],[11,"gt","","",155,null],[11,"ge","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",155,null],[11,"new","","Returns an empty `EnumSet`.",155,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",155,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",155,null],[11,"clear","","",155,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",155,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",155,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",155,null],[11,"union","","Returns the union of both `EnumSets`.",155,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",155,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",155,null],[11,"remove","","Removes an enum from the EnumSet",155,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",155,null],[11,"iter","","Returns an iterator over an `EnumSet`.",155,null],[11,"sub","","",155,null],[11,"bitor","","",155,null],[11,"bitand","","",155,null],[11,"bitxor","","",155,null],[11,"clone","","",156,null],[11,"next","","",156,null],[11,"size_hint","","",156,null],[11,"from_iter","","",155,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",155,null],[11,"extend","","",155,null],[11,"clone","collections::linked_list","",157,null],[11,"clone","","",158,null],[11,"default","","",159,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",159,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",159,null],[11,"iter","","Provides a forward iterator.",159,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",159,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",159,null],[11,"len","","Returns the length of the `LinkedList`.",159,null],[11,"clear","","Removes all elements from the `LinkedList`.",159,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",159,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",159,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",159,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",159,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",159,null],[11,"push_front","","Adds an element first in the list.",159,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",159,null],[11,"push_back","","Appends an element to the back of a list",159,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",159,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",159,null],[11,"front_place","","Returns a place for insertion at the front of the list.",159,null],[11,"back_place","","Returns a place for insertion at the back of the list.",159,null],[11,"drop","","",159,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"next_back","","",157,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",160,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",160,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",159,null],[11,"extend","","",159,null],[11,"extend","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"partial_cmp","","",159,null],[11,"cmp","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[11,"hash","","",159,null],[11,"make_place","","",161,null],[11,"pointer","","",161,null],[11,"finalize","","",161,null],[11,"make_place","","",162,null],[11,"pointer","","",162,null],[11,"finalize","","",162,null],[11,"start","core::ops","",11,null],[11,"end","","",12,null],[11,"start","","",10,null],[11,"end","","",10,null],[11,"borrow","collections::vec","",133,null],[11,"borrow_mut","","",133,null],[11,"clone","collections::str","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"borrow","collections::string","",164,null],[11,"cmp","","",164,null],[11,"partial_cmp","","",164,null],[11,"lt","","",164,null],[11,"le","","",164,null],[11,"gt","","",164,null],[11,"ge","","",164,null],[11,"fmt","","",165,null],[11,"fmt","","",166,null],[11,"new","","Creates a new empty `String`.",164,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",164,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",164,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",164,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",164,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",164,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",164,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",164,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",164,null],[11,"as_str","","Extracts a string slice containing the entire string.",164,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",164,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",164,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",164,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",164,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",164,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",164,null],[11,"push","","Appends the given `char` to the end of this `String`.",164,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",164,null],[11,"truncate","","Shortens this `String` to the specified length.",164,null],[11,"pop","","Removes the last character from the string buffer and returns it.",164,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",164,null],[11,"insert","","Inserts a character into this `String` at a byte position.",164,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",164,null],[11,"len","","Returns the length of this `String`, in bytes.",164,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",164,null],[11,"clear","","Truncates this `String`, removing all contents.",164,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",164,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",164,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",165,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",165,null],[11,"fmt","","",165,null],[11,"fmt","","",166,null],[11,"clone","","",164,null],[11,"clone_from","","",164,null],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",164,null],[11,"extend","","",164,null],[11,"extend","","",164,null],[11,"extend","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","collections::borrow","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","collections::string","",164,null],[11,"ne","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",164,null],[11,"fmt","","",164,null],[11,"hash","","",164,null],[11,"add","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"deref","","",164,null],[11,"deref_mut","","",164,null],[11,"from_str","","",164,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",167,null],[11,"fmt","","",167,null],[11,"fmt","","",167,null],[11,"eq","","",167,null],[11,"as_ref","","",164,null],[11,"as_ref","","",164,null],[11,"from","","",164,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",154,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",154,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",164,null],[11,"write_str","","",164,null],[11,"write_char","","",164,null],[11,"drop","","",168,null],[11,"next","","",168,null],[11,"size_hint","","",168,null],[11,"next_back","","",168,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",133,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",133,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",133,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",133,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",133,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",133,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",133,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",133,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",133,null],[11,"as_slice","","Extracts a slice containing the entire vector.",133,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",133,null],[11,"set_len","","Sets the length of a vector.",133,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",133,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",133,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",133,null],[11,"retain","","Retains only the elements specified by the predicate.",133,null],[11,"push","","Appends an element to the back of a collection.",133,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",133,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",133,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",133,null],[11,"clear","","Clears the vector, removing all values.",133,null],[11,"len","","Returns the number of elements in the vector.",133,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",133,null],[11,"split_off","","Splits the collection into two at the given index.",133,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",133,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",133,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",133,null],[11,"clone","","",133,null],[11,"clone_from","","",133,null],[11,"hash","","",133,null],[11,"index","","",133,null],[11,"index_mut","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"deref","","",133,null],[11,"deref_mut","","",133,null],[11,"from_iter","","",133,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",133,null],[11,"extend","","",133,null],[11,"extend","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","collections::borrow","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","collections::vec","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"partial_cmp","","",133,null],[11,"cmp","","",133,null],[11,"drop","","",133,null],[11,"default","","",133,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",133,null],[11,"as_ref","","",133,null],[11,"as_mut","","",133,null],[11,"as_ref","","",133,null],[11,"as_mut","","",133,null],[11,"from","","",133,null],[11,"from","","",133,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",154,null],[11,"from","","",154,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",154,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",169,null],[11,"size_hint","","",169,null],[11,"count","","",169,null],[11,"next_back","","",169,null],[11,"clone","","",169,null],[11,"drop","","",169,null],[11,"next","","",170,null],[11,"size_hint","","",170,null],[11,"next_back","","",170,null],[11,"drop","","",170,null],[11,"clone","collections::vec_deque","",171,null],[11,"drop","","",171,null],[11,"default","","",171,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",171,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",171,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",171,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",171,null],[11,"swap","","Swaps elements at indices `i` and `j`.",171,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",171,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",171,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",171,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",171,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",171,null],[11,"iter","","Returns a front-to-back iterator.",171,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",171,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",171,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",171,null],[11,"len","","Returns the number of elements in the `VecDeque`.",171,null],[11,"is_empty","","Returns true if the buffer contains no elements",171,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",171,null],[11,"clear","","Clears the buffer, removing all values.",171,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",171,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",171,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",171,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",171,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",171,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",171,null],[11,"push_front","","Inserts an element first in the sequence.",171,null],[11,"push_back","","Appends an element to the back of a buffer",171,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",171,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",171,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",171,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",171,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",171,null],[11,"split_off","","Splits the collection into two at the given index.",171,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",171,null],[11,"retain","","Retains only the elements specified by the predicate.",171,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",171,null],[11,"clone","","",172,null],[11,"next","","",172,null],[11,"size_hint","","",172,null],[11,"next_back","","",172,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[11,"clone","","",174,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"next_back","","",174,null],[11,"drop","","",175,null],[11,"next","","",175,null],[11,"size_hint","","",175,null],[11,"next_back","","",175,null],[11,"eq","","",171,null],[11,"partial_cmp","","",171,null],[11,"cmp","","",171,null],[11,"hash","","",171,null],[11,"index","","",171,null],[11,"index_mut","","",171,null],[11,"from_iter","","",171,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",171,null],[11,"extend","","",171,null],[11,"extend","","",171,null],[11,"fmt","","",171,null],[11,"from","","",171,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",133,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",176,null],[11,"ne","","",176,null],[11,"hash","","",176,null],[11,"fmt","","",176,null],[11,"clone","","",176,null],[11,"clone","alloc::boxed","",177,null],[11,"pointer","","",178,null],[11,"make_place","","",178,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",178,null],[11,"finalize","","",179,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",177,null],[11,"drop","","",178,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",179,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",179,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",179,null],[11,"default","","",179,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",179,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",179,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",179,null],[11,"clone","","",179,null],[11,"eq","","",179,null],[11,"ne","","",179,null],[11,"partial_cmp","","",179,null],[11,"lt","","",179,null],[11,"le","","",179,null],[11,"ge","","",179,null],[11,"gt","","",179,null],[11,"cmp","","",179,null],[11,"hash","","",179,null],[11,"from","","",179,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,null],[11,"fmt","","",179,null],[11,"fmt","","",179,null],[11,"fmt","","",179,null],[11,"deref","","",179,null],[11,"deref_mut","","",179,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"next_back","","",179,null],[11,"call_once","","",179,null],[11,"call_once","","",179,null],[11,"clone","","",179,null],[11,"borrow","","",179,null],[11,"borrow_mut","","",179,null],[11,"as_ref","","",179,null],[11,"as_mut","","",179,null],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",180,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",180,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",180,null],[11,"next_match","","Find the next `Match` result. See `next()`",181,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",181,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",182,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",182,null],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",183,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",183,null],[11,"last","","Consumes the iterator, returning the last element.",183,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",183,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",183,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",183,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",183,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",183,null],[11,"filter_map","","Creates an iterator that both filters and maps.",183,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",183,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",183,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",183,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",183,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",183,null],[11,"take","","Creates an iterator that yields its first `n` elements.",183,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",183,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",183,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",183,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",183,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",183,null],[11,"collect","","Transforms an iterator into a collection.",183,null],[11,"partition","","Consumes an iterator, creating two collections from it.",183,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",183,null],[11,"all","","Tests if every element of the iterator matches a predicate.",183,null],[11,"any","","Tests if any element of the iterator matches a predicate.",183,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",183,null],[11,"position","","Searches for an element in an iterator, returning its index.",183,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",183,null],[11,"max","","Returns the maximum element of an iterator.",183,null],[11,"min","","Returns the minimum element of an iterator.",183,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",183,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",183,null],[11,"rev","","Reverses an iterator&#39;s direction.",183,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",183,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",183,null],[11,"cycle","","Repeats an iterator endlessly.",183,null],[11,"sum","","Sums the elements of an iterator.",183,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",183,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",183,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",183,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",183,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",183,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",183,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",183,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",183,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",183,null],[11,"len","","Returns the exact number of times the iterator will iterate.",184,null],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",185,null],[11,"partial_cmp","","",185,null],[11,"lt","","",185,null],[11,"le","","",185,null],[11,"gt","","",185,null],[11,"ge","","",185,null],[11,"eq","","",185,null],[11,"ne","","",185,null],[11,"hash","","",185,null],[11,"default","","",185,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",185,null],[11,"new","","Construct a new, empty `ByteBuf`.",185,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",185,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",185,null],[11,"into","","",185,null],[11,"from","","",185,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",185,null],[11,"as_ref","","",185,null],[11,"as_mut","","",185,null],[11,"as_mut","","",185,null],[11,"deref","","",185,null],[11,"deref_mut","","",185,null],[11,"serialize","","",185,null],[11,"visit_unit","","",186,null],[11,"visit_seq","","",186,null],[11,"visit_bytes","","",186,null],[11,"visit_byte_buf","","",186,null],[11,"deserialize","","",185,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",187,null],[11,"partial_cmp","","",187,null],[11,"lt","","",187,null],[11,"le","","",187,null],[11,"gt","","",187,null],[11,"ge","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"hash","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",187,null],[11,"from","","",187,null],[11,"from","","",187,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",187,null],[11,"deref","","",187,null],[11,"serialize","","",187,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",188,null],[13,"Usize","","Represents a `usize` type.",188,null],[13,"U8","","Represents a `u8` type.",188,null],[13,"U16","","Represents a `u16` type.",188,null],[13,"U32","","Represents a `u32` type.",188,null],[13,"U64","","Represents a `u64` type.",188,null],[13,"Isize","","Represents a `isize` type.",188,null],[13,"I8","","Represents a `i8` type.",188,null],[13,"I16","","Represents a `i16` type.",188,null],[13,"I32","","Represents a `i32` type.",188,null],[13,"I64","","Represents a `i64` type.",188,null],[13,"F32","","Represents a `f32` type.",188,null],[13,"F64","","Represents a `f64` type.",188,null],[13,"Char","","Represents a `char` type.",188,null],[13,"Str","","Represents a `&amp;str` type.",188,null],[13,"String","","Represents a `String` type.",188,null],[13,"Unit","","Represents a `()` type.",188,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",188,null],[13,"Seq","","Represents a sequence type.",188,null],[13,"Map","","Represents a map type.",188,null],[13,"UnitStruct","","Represents a unit struct type.",188,null],[13,"NewtypeStruct","","Represents a newtype type.",188,null],[13,"TupleStruct","","Represents a tuple struct type.",188,null],[13,"Struct","","Represents a struct type.",188,null],[13,"FieldName","","Represents a struct field name.",188,null],[13,"Tuple","","Represents a tuple type.",188,null],[13,"Enum","","Represents an `enum` type.",188,null],[13,"VariantName","","Represents an enum variant name.",188,null],[13,"StructVariant","","Represents a struct variant.",188,null],[13,"TupleVariant","","Represents a tuple variant.",188,null],[13,"UnitVariant","","Represents a unit variant.",188,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",188,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",189,null],[11,"visit_seq","","",189,null],[11,"visit_bool","","",190,null],[11,"visit_str","","",190,null],[11,"deserialize","collections::string","",164,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",191,null],[11,"deserialize","core::marker","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",192,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",192,null],[11,"visit_seq","","",192,null],[11,"deserialize","collections::binary_heap","",129,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",193,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",193,null],[11,"visit_seq","","",193,null],[11,"deserialize","collections::btree::set","",146,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",194,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",194,null],[11,"visit_seq","","",194,null],[11,"deserialize","collections::linked_list","",159,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",195,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",195,null],[11,"visit_seq","","",195,null],[11,"deserialize","std::collections::hash::set","",196,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",197,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",197,null],[11,"visit_seq","","",197,null],[11,"deserialize","collections::vec","",133,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",198,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",198,null],[11,"visit_seq","","",198,null],[11,"deserialize","collections::vec_deque","",171,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",199,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",199,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",200,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",201,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",201,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",202,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",202,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",203,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",204,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",204,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",205,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",206,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",206,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",207,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",208,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",208,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",209,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",209,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",210,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",211,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",211,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",212,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",212,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",213,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",213,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",214,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",215,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",215,null],[11,"visit_map","","",215,null],[11,"deserialize","collections::btree::map","",134,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",216,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",216,null],[11,"visit_map","","",216,null],[11,"deserialize","std::collections::hash::map","",217,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",219,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",220,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",221,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",222,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",223,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",179,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",179,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",224,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",225,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",154,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",227,null],[13,"InvalidType","","The value had an incorrect type.",227,null],[13,"InvalidLength","","The value had an invalid length.",227,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",227,null],[13,"EndOfStream","","EOF while deserializing a value.",227,null],[13,"UnknownVariant","","Unknown variant in enum.",227,null],[13,"UnknownField","","Unknown field in struct.",227,null],[13,"MissingField","","Struct is missing a field.",227,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",228,null],[10,"into_deserializer","","Convert this value into a deserializer.",228,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"custom","","",227,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",227,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",227,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",227,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",227,null],[11,"description","","",227,null],[11,"cause","","",227,null],[11,"deserialize","","",229,null],[11,"deserialize_option","","",229,null],[11,"deserialize","","",230,null],[11,"deserialize","","",231,null],[11,"deserialize","","",232,null],[11,"deserialize","","",233,null],[11,"deserialize","","",234,null],[11,"deserialize","","",235,null],[11,"deserialize","","",236,null],[11,"deserialize","","",237,null],[11,"deserialize","","",238,null],[11,"deserialize","","",239,null],[11,"deserialize","","",240,null],[11,"deserialize","","",241,null],[11,"deserialize","","",242,null],[11,"deserialize","","",243,null],[11,"deserialize","","",244,null],[11,"deserialize_enum","","",244,null],[11,"visit_variant","","",244,null],[11,"visit_unit","","",244,null],[11,"into_deserializer","collections::string","",164,null],[11,"deserialize","serde::de::value","",245,null],[11,"deserialize_enum","","",245,null],[11,"visit_variant","","",245,null],[11,"visit_unit","","",245,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",246,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",246,null],[11,"visit","","",246,null],[11,"end","","",246,null],[11,"size_hint","","",246,null],[11,"into_deserializer","collections::vec","",133,null],[11,"into_deserializer","collections::btree::set","",146,null],[11,"into_deserializer","std::collections::hash::set","",196,null],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",247,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",247,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",248,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",248,null],[11,"visit_key","","",248,null],[11,"visit_value","","",248,null],[11,"end","","",248,null],[11,"size_hint","","",248,null],[11,"into_deserializer","collections::btree::map","",134,null],[11,"into_deserializer","std::collections::hash::map","",217,null],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",249,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",249,null],[11,"into_deserializer","serde::bytes","",187,null],[11,"deserialize","serde::de::value","",250,null],[11,"into_deserializer","serde::bytes","",185,null],[11,"deserialize","serde::de::value","",251,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",252,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",252,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",252,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",252,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",253,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",254,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",254,null],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",254,null],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",254,null],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",254,null],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",254,null],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",254,null],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",254,null],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",254,null],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",254,null],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",254,null],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",254,null],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",254,null],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",254,null],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",254,null],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",254,null],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",254,null],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",254,null],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",254,null],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",254,null],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",254,null],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",254,null],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",254,null],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",254,null],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",254,null],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",254,null],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",254,null],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",254,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",254,null],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",254,null],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",254,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",254,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",255,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",255,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",255,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",255,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",255,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",255,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",255,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",255,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",255,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",255,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",255,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",255,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",255,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",255,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",255,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",255,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",255,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",255,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",255,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",255,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",255,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",255,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",255,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",255,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",255,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",255,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",256,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",256,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",256,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",256,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",257,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",257,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",257,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",257,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",257,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",257,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",257,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",258,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",258,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",259,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",259,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",259,null],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",259,null],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",259,null],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",259,null],[11,"fmt","","",188,null],[11,"eq","","",188,null],[11,"clone","","",188,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",260,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",260,null],[11,"col","","Report the current column inside the iterator.",260,null],[11,"get_ref","","Gets a reference to the underlying iterator.",260,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",260,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",260,null],[11,"peek","","peeks at the next value",260,null],[11,"next","","",260,null],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"TupleVisitor13","","A tuple visitor.",null,null],[3,"TupleVisitor14","","A tuple visitor.",null,null],[3,"TupleVisitor15","","A tuple visitor.",null,null],[3,"TupleVisitor16","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",164,null],[11,"serialize","core::option","",63,null],[11,"visit","","",63,null],[11,"len","","",63,null],[11,"serialize","core::marker","",8,null],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",261,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",261,null],[11,"len","","",261,null],[11,"serialize","collections::binary_heap","",129,null],[11,"serialize","collections::btree::set","",146,null],[11,"serialize","std::collections::hash::set","",196,null],[11,"serialize","collections::linked_list","",159,null],[11,"serialize","collections::vec","",133,null],[11,"serialize","collections::vec_deque","",171,null],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",262,null],[11,"visit","","",262,null],[11,"len","","",262,null],[11,"new","","Construct a new, empty `TupleVisitor`.",263,null],[11,"visit","","",263,null],[11,"len","","",263,null],[11,"new","","Construct a new, empty `TupleVisitor`.",264,null],[11,"visit","","",264,null],[11,"len","","",264,null],[11,"new","","Construct a new, empty `TupleVisitor`.",265,null],[11,"visit","","",265,null],[11,"len","","",265,null],[11,"new","","Construct a new, empty `TupleVisitor`.",266,null],[11,"visit","","",266,null],[11,"len","","",266,null],[11,"new","","Construct a new, empty `TupleVisitor`.",267,null],[11,"visit","","",267,null],[11,"len","","",267,null],[11,"new","","Construct a new, empty `TupleVisitor`.",268,null],[11,"visit","","",268,null],[11,"len","","",268,null],[11,"new","","Construct a new, empty `TupleVisitor`.",269,null],[11,"visit","","",269,null],[11,"len","","",269,null],[11,"new","","Construct a new, empty `TupleVisitor`.",270,null],[11,"visit","","",270,null],[11,"len","","",270,null],[11,"new","","Construct a new, empty `TupleVisitor`.",271,null],[11,"visit","","",271,null],[11,"len","","",271,null],[11,"new","","Construct a new, empty `TupleVisitor`.",272,null],[11,"visit","","",272,null],[11,"len","","",272,null],[11,"new","","Construct a new, empty `TupleVisitor`.",273,null],[11,"visit","","",273,null],[11,"len","","",273,null],[11,"new","","Construct a new, empty `TupleVisitor`.",274,null],[11,"visit","","",274,null],[11,"len","","",274,null],[11,"new","","Construct a new, empty `TupleVisitor`.",275,null],[11,"visit","","",275,null],[11,"len","","",275,null],[11,"new","","Construct a new, empty `TupleVisitor`.",276,null],[11,"visit","","",276,null],[11,"len","","",276,null],[11,"new","","Construct a new, empty `TupleVisitor`.",277,null],[11,"visit","","",277,null],[11,"len","","",277,null],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",278,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",278,null],[11,"len","","",278,null],[11,"serialize","collections::btree::map","",134,null],[11,"serialize","std::collections::hash::map","",217,null],[11,"serialize","alloc::boxed","",179,null],[11,"serialize","alloc::rc","",225,null],[11,"serialize","alloc::arc","",224,null],[11,"serialize","collections::borrow","",154,null],[11,"serialize","core::result","",68,null],[11,"serialize","std::net::ip","",218,null],[11,"serialize","","",219,null],[11,"serialize","std::net::addr","",220,null],[11,"serialize","","",221,null],[11,"serialize","","",222,null],[11,"serialize","std::path","",279,null],[11,"serialize","","",223,null],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",280,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",280,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",281,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",282,null],[10,"serialize_bool","","Serializes a `bool` value.",282,null],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",282,null],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",282,null],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",282,null],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",282,null],[10,"serialize_i64","","Serializes a `i64` value.",282,null],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",282,null],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",282,null],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",282,null],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",282,null],[10,"serialize_u64","","`Serializes a `u64` value.",282,null],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",282,null],[10,"serialize_f64","","Serializes a `f64` value.",282,null],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",282,null],[10,"serialize_str","","Serializes a `&amp;str`.",282,null],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",282,null],[10,"serialize_unit","","Serializes a `()` value.",282,null],[11,"serialize_unit_struct","","Serializes a unit struct value.",282,null],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",282,null],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",282,null],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",282,null],[10,"serialize_none","","Serializes a `None` value..serialize",282,null],[10,"serialize_some","","Serializes a `Some(...)` value.",282,null],[10,"serialize_seq","","Serializes a sequence.",282,null],[10,"serialize_seq_elt","","Serializes a sequence element.",282,null],[11,"serialize_tuple","","Serializes a tuple.",282,null],[11,"serialize_tuple_elt","","Serializes a tuple element.",282,null],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",282,null],[11,"serialize_tuple_struct","","Serializes a tuple struct.",282,null],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",282,null],[11,"serialize_tuple_variant","","Serializes a tuple variant.",282,null],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",282,null],[10,"serialize_map","","Serializes a map.",282,null],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",282,null],[11,"serialize_struct","","Serializes a struct.",282,null],[11,"serialize_struct_elt","","Serializes an element of a struct.",282,null],[11,"serialize_struct_variant","","Serializes a struct variant.",282,null],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",282,null],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",283,null],[11,"len","","Return the length of the sequence if known.",283,null],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",284,null],[11,"len","","Return the length of the map if known.",284,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["serde_macros"] = {"doc":"","items":[],"paths":[]};
searchIndex["serde_codegen"] = {"doc":"","items":[[5,"register","serde_codegen","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["quasi_macros"] = {"doc":"","items":[],"paths":[]};
searchIndex["quasi_codegen"] = {"doc":"","items":[[5,"register","quasi_codegen","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["aster"] = {"doc":"","items":[[3,"AstBuilder","aster","",null,null],[0,"arm","","",null,null],[3,"ArmBuilder","aster::arm","",null,null],[3,"ArmPatBuilder","","",null,null],[3,"ArmBodyBuilder","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",0,null],[11,"with_attrs","","",0,null],[11,"with_attr","","",0,null],[11,"attr","","",0,null],[11,"with_pats","","",0,null],[11,"with_pat","","",0,null],[11,"pat","","",0,null],[11,"invoke","","",0,null],[11,"invoke","","",0,null],[11,"with_pats","","",1,null],[11,"with_pat","","",1,null],[11,"pat","","",1,null],[11,"with_guard","","",1,null],[11,"guard","","",1,null],[11,"body","","",1,null],[11,"build_arm_","","",1,null],[11,"invoke","","",1,null],[11,"invoke","","",1,null],[11,"body","","",2,null],[11,"build","","",2,null],[11,"invoke","","",2,null],[0,"attr","aster","",null,null],[3,"AttrBuilder","aster::attr","",null,null],[3,"AttrListBuilder","","",null,null],[3,"AttrNameValueBuilder","","",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",3,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",3,null],[11,"inner","","",3,null],[11,"build_meta_item","","",3,null],[11,"build_meta_item_","","",3,null],[11,"word","","",3,null],[11,"list","","",3,null],[11,"name_value","","",3,null],[11,"automatically_derived","","",3,null],[11,"inline","","",3,null],[11,"test","","",3,null],[11,"allow","","",3,null],[11,"warn","","",3,null],[11,"deny","","",3,null],[11,"features","","",3,null],[11,"plugins","","",3,null],[11,"doc","","Create a #[doc = &quot;...&quot;] node. Note that callers of this must make sure to prefix their\ncomments with either &quot;///&quot; or &quot;/\\*\\*&quot; if an outer comment, or &quot;//!&quot; or &quot;/\\*!&quot; if an inner\ncomment.",3,null],[11,"invoke","","",3,null],[11,"invoke","","",3,null],[11,"with_callback","","",4,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",4,null],[11,"with_meta_items","","",4,null],[11,"with_meta_items_","","",4,null],[11,"with_meta_item","","",4,null],[11,"with_meta_item_kind","","",4,null],[11,"words","","",4,null],[11,"word","","",4,null],[11,"list","","",4,null],[11,"name_value","","",4,null],[11,"build","","",4,null],[11,"invoke","","",4,null],[11,"invoke","","",4,null],[11,"invoke","","",5,null],[0,"block","aster","",null,null],[3,"BlockBuilder","aster::block","",null,null],[11,"new","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",6,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",6,null],[11,"unsafe_","","",6,null],[11,"with_stmts","","",6,null],[11,"with_stmt","","",6,null],[11,"stmt","","",6,null],[11,"build_expr","","",6,null],[11,"expr","","",6,null],[11,"build","","",6,null],[11,"invoke","","",6,null],[11,"invoke","","",6,null],[0,"constant","aster","",null,null],[3,"Const","aster::constant","",null,null],[12,"ty","","",7,null],[12,"expr","","",7,null],[3,"ConstBuilder","","",null,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",8,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",8,null],[11,"with_expr","","",8,null],[11,"expr","","",8,null],[11,"ty","","",8,null],[11,"build","","",8,null],[11,"invoke","","",8,null],[11,"invoke","","",8,null],[0,"expr","aster","",null,null],[3,"ExprBuilder","aster::expr","",null,null],[3,"ExprUnaryBuilder","","",null,null],[3,"ExprBinaryLhsBuilder","","",null,null],[3,"ExprBinaryRhsBuilder","","",null,null],[3,"ExprReturnBuilder","","",null,null],[3,"ExprTupleBuilder","","",null,null],[3,"ExprStructBuilder","","",null,null],[3,"ExprStructPathBuilder","","",null,null],[3,"ExprStructFieldBuilder","","",null,null],[3,"ExprCallBuilder","","",null,null],[3,"ExprCallArgsBuilder","","",null,null],[3,"ExprMethodCallBuilder","","",null,null],[3,"ExprMethodCallArgsBuilder","","",null,null],[3,"ExprRefBuilder","","",null,null],[3,"ExprPathBuilder","","",null,null],[3,"ExprAssignBuilder","","",null,null],[3,"ExprAssignLhsBuilder","","",null,null],[3,"ExprAssignOpBuilder","","",null,null],[3,"ExprAssignOpLhsBuilder","","",null,null],[3,"ExprIndexBuilder","","",null,null],[3,"ExprIndexLhsBuilder","","",null,null],[3,"ExprRepeatBuilder","","",null,null],[3,"ExprRepeatLhsBuilder","","",null,null],[3,"ExprLoopBuilder","","",null,null],[3,"ExprIfBuilder","","",null,null],[3,"ExprIfThenBuilder","","",null,null],[3,"ExprIfThenElseBuilder","","",null,null],[3,"ExprElseIfBuilder","","",null,null],[3,"ExprElseIfThenBuilder","","",null,null],[3,"ExprMatchBuilder","","",null,null],[3,"ExprMatchArmBuilder","","",null,null],[3,"ExprParenBuilder","","",null,null],[3,"ExprFieldBuilder","","",null,null],[3,"ExprTupFieldBuilder","","",null,null],[3,"ExprSliceBuilder","","",null,null],[3,"ExprVecBuilder","","",null,null],[3,"ExprTryBuilder","","",null,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",9,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",9,null],[11,"span","","",9,null],[11,"with_attr","","",9,null],[11,"attr","","",9,null],[11,"build_expr_kind","","",9,null],[11,"build_path","","",9,null],[11,"build_qpath","","",9,null],[11,"path","","",9,null],[11,"qpath","","",9,null],[11,"id","","",9,null],[11,"build_lit","","",9,null],[11,"lit","","",9,null],[11,"bool","","",9,null],[11,"true_","","",9,null],[11,"false_","","",9,null],[11,"int","","",9,null],[11,"uint","","",9,null],[11,"isize","","",9,null],[11,"i8","","",9,null],[11,"i16","","",9,null],[11,"i32","","",9,null],[11,"i64","","",9,null],[11,"usize","","",9,null],[11,"u8","","",9,null],[11,"u16","","",9,null],[11,"u32","","",9,null],[11,"u64","","",9,null],[11,"f32","","",9,null],[11,"f64","","",9,null],[11,"str","","",9,null],[11,"build_unary","","",9,null],[11,"build_deref","","",9,null],[11,"build_not","","",9,null],[11,"build_neg","","",9,null],[11,"unary","","",9,null],[11,"deref","","",9,null],[11,"not","","",9,null],[11,"neg","","",9,null],[11,"build_binary","","",9,null],[11,"build_add","","",9,null],[11,"build_sub","","",9,null],[11,"build_mul","","",9,null],[11,"build_div","","",9,null],[11,"build_rem","","",9,null],[11,"build_and","","",9,null],[11,"build_or","","",9,null],[11,"build_bit_xor","","",9,null],[11,"build_bit_and","","",9,null],[11,"build_bit_or","","",9,null],[11,"build_shl","","",9,null],[11,"build_shr","","",9,null],[11,"build_eq","","",9,null],[11,"build_lt","","",9,null],[11,"build_le","","",9,null],[11,"build_ne","","",9,null],[11,"build_ge","","",9,null],[11,"build_gt","","",9,null],[11,"binary","","",9,null],[11,"add","","",9,null],[11,"sub","","",9,null],[11,"mul","","",9,null],[11,"div","","",9,null],[11,"rem","","",9,null],[11,"and","","",9,null],[11,"or","","",9,null],[11,"bit_xor","","",9,null],[11,"bit_and","","",9,null],[11,"bit_or","","",9,null],[11,"shl","","",9,null],[11,"shr","","",9,null],[11,"eq","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"ne","","",9,null],[11,"ge","","",9,null],[11,"gt","","",9,null],[11,"ref_","","",9,null],[11,"mut_ref","","",9,null],[11,"break_","","",9,null],[11,"break_to","","",9,null],[11,"continue_","","",9,null],[11,"continue_to","","",9,null],[11,"return_","","",9,null],[11,"return_expr","","",9,null],[11,"unit","","",9,null],[11,"tuple","","",9,null],[11,"struct_path","","",9,null],[11,"struct_id","","",9,null],[11,"struct_","","",9,null],[11,"self_","","",9,null],[11,"none","","",9,null],[11,"some","","",9,null],[11,"ok","","",9,null],[11,"err","","",9,null],[11,"phantom_data","","",9,null],[11,"call","","",9,null],[11,"method_call","","",9,null],[11,"build_block","","",9,null],[11,"block","","",9,null],[11,"build_assign","","",9,null],[11,"assign","","",9,null],[11,"build_assign_op","","",9,null],[11,"assign_op","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"mul_assign","","",9,null],[11,"rem_assign","","",9,null],[11,"and_assign","","",9,null],[11,"or_assign","","",9,null],[11,"bit_xor_assign","","",9,null],[11,"bit_and_assign","","",9,null],[11,"bit_or_assign","","",9,null],[11,"bit_shl_assign","","",9,null],[11,"bit_shr_assign","","",9,null],[11,"build_index","","",9,null],[11,"index","","",9,null],[11,"build_repeat","","",9,null],[11,"repeat","","",9,null],[11,"loop_","","",9,null],[11,"if_","","",9,null],[11,"match_","","",9,null],[11,"paren","","",9,null],[11,"field","","",9,null],[11,"tup_field","","",9,null],[11,"box_","","",9,null],[11,"rc","","",9,null],[11,"arc","","",9,null],[11,"default","","",9,null],[11,"slice","","",9,null],[11,"vec","","",9,null],[11,"try","","Represents an equivalent to `try!(...)`.",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",10,null],[11,"invoke","","",11,null],[11,"invoke","","",12,null],[11,"invoke","","",13,null],[11,"with_exprs","","",14,null],[11,"expr","","",14,null],[11,"build","","",14,null],[11,"invoke","","",14,null],[11,"invoke","","",15,null],[11,"span","","",16,null],[11,"with_fields","","",16,null],[11,"with_id_exprs","","",16,null],[11,"field","","",16,null],[11,"build_with","","",16,null],[11,"build","","",16,null],[11,"invoke","","",16,null],[11,"invoke","","",17,null],[11,"invoke","","",18,null],[11,"with_args","","",19,null],[11,"with_arg","","",19,null],[11,"arg","","",19,null],[11,"build","","",19,null],[11,"invoke","","",19,null],[11,"invoke","","",20,null],[11,"with_tys","","",21,null],[11,"with_ty","","",21,null],[11,"ty","","",21,null],[11,"with_args","","",21,null],[11,"with_arg","","",21,null],[11,"arg","","",21,null],[11,"build","","",21,null],[11,"invoke","","",21,null],[11,"invoke","","",21,null],[11,"invoke","","",22,null],[11,"invoke","","",23,null],[11,"invoke","","",24,null],[11,"invoke","","",25,null],[11,"invoke","","",26,null],[11,"invoke","","",27,null],[11,"invoke","","",28,null],[11,"invoke","","",29,null],[11,"invoke","","",30,null],[11,"invoke","","",31,null],[11,"span","","",32,null],[11,"label","","",32,null],[11,"block","","",32,null],[11,"invoke","","",32,null],[11,"invoke","","",33,null],[11,"build_then","","",34,null],[11,"then","","",34,null],[11,"invoke","","",34,null],[11,"else_if","","",35,null],[11,"build_else","","",35,null],[11,"else_","","",35,null],[11,"build","","",35,null],[11,"invoke","","",35,null],[11,"invoke","","",36,null],[11,"build_then","","",37,null],[11,"then","","",37,null],[11,"invoke","","",37,null],[11,"invoke","","",38,null],[11,"with_arms","","",39,null],[11,"with_arm","","",39,null],[11,"arm","","",39,null],[11,"build","","",39,null],[11,"invoke","","",39,null],[11,"invoke","","",40,null],[11,"invoke","","",41,null],[11,"invoke","","",42,null],[11,"with_exprs","","",43,null],[11,"expr","","",43,null],[11,"build","","",43,null],[11,"invoke","","",43,null],[11,"invoke","","",44,null],[11,"invoke","","",45,null],[0,"fn_decl","aster","",null,null],[3,"FnDeclBuilder","aster::fn_decl","",null,null],[3,"ArgBuilder","","",null,null],[3,"ArgPatBuilder","","",null,null],[11,"new","","",46,{"inputs":[],"output":{"name":"fndeclbuilder"}}],[11,"with_callback","","",46,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",46,null],[11,"variadic","","",46,null],[11,"with_self","","",46,null],[11,"self_","","",46,null],[11,"with_arg","","",46,null],[11,"with_args","","",46,null],[11,"arg","","",46,null],[11,"arg_id","","",46,null],[11,"arg_ref_id","","",46,null],[11,"arg_mut_id","","",46,null],[11,"arg_ref_mut_id","","",46,null],[11,"no_return","","",46,null],[11,"default_return","","",46,null],[11,"build_return","","",46,null],[11,"return_","","",46,null],[11,"build","","",46,null],[11,"invoke","","",46,null],[11,"invoke","","",46,null],[11,"invoke","","",46,null],[11,"new","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",47,{"inputs":[{"name":"f"}],"output":{"name":"argbuilder"}}],[11,"span","","",47,null],[11,"with_pat","","",47,null],[11,"pat","","",47,null],[11,"id","","",47,null],[11,"ref_id","","",47,null],[11,"mut_id","","",47,null],[11,"ref_mut_id","","",47,null],[11,"invoke","","",47,null],[11,"with_ty","","",48,null],[11,"ty","","",48,null],[11,"invoke","","",48,null],[0,"generics","aster","",null,null],[3,"GenericsBuilder","aster::generics","",null,null],[11,"new","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",49,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",49,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",49,null],[11,"span","","",49,null],[11,"with_lifetimes","","",49,null],[11,"with_lifetime_names","","",49,null],[11,"with_lifetime","","",49,null],[11,"lifetime_name","","",49,null],[11,"lifetime","","",49,null],[11,"with_ty_params","","",49,null],[11,"with_ty_param_ids","","",49,null],[11,"with_ty_param","","",49,null],[11,"ty_param_id","","",49,null],[11,"ty_param","","",49,null],[11,"with_predicates","","",49,null],[11,"with_predicate","","",49,null],[11,"predicate","","",49,null],[11,"add_lifetime_bound","","",49,null],[11,"add_ty_param_bound","","",49,null],[11,"strip_bounds","","",49,null],[11,"strip_lifetimes","","",49,null],[11,"strip_ty_params","","",49,null],[11,"strip_predicates","","",49,null],[11,"build","","",49,null],[11,"invoke","","",49,null],[11,"invoke","","",49,null],[11,"invoke","","",49,null],[0,"ident","aster","",null,null],[8,"ToIdent","aster::ident","",null,null],[10,"to_ident","","",50,null],[11,"to_ident","syntax::ast","",51,null],[11,"to_ident","","",52,null],[11,"to_ident","collections::string","",53,null],[0,"invoke","aster","",null,null],[3,"Identity","aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",54,null],[10,"invoke","","",54,null],[11,"clone","","",55,null],[11,"invoke","","",55,null],[0,"item","aster","",null,null],[3,"ItemBuilder","aster::item","",null,null],[3,"ItemFnDeclBuilder","","",null,null],[3,"ItemFnBuilder","","",null,null],[3,"ItemUseBuilder","","",null,null],[3,"ItemUsePathBuilder","","",null,null],[3,"ItemUsePathListBuilder","","",null,null],[3,"ItemStructBuilder","","",null,null],[3,"ItemTupleStructBuilder","","",null,null],[3,"ItemEnumBuilder","","",null,null],[3,"ItemExternCrateBuilder","","A builder for extern crate items",null,null],[3,"ItemMacBuilder","","A builder for macro invocation items.",null,null],[3,"ItemTyBuilder","","",null,null],[3,"ItemTraitBuilder","","",null,null],[3,"ItemTraitItemBuilder","","",null,null],[3,"ItemTraitMethodBuilder","","",null,null],[3,"ItemTraitTypeBuilder","","",null,null],[3,"ItemImplBuilder","","",null,null],[3,"ItemImplItemBuilder","","",null,null],[3,"ItemImplMethodBuilder","","",null,null],[3,"ItemConstBuilder","","",null,null],[11,"new","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",56,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",56,null],[11,"span","","",56,null],[11,"with_attrs","","",56,null],[11,"with_attr","","",56,null],[11,"attr","","",56,null],[11,"pub_","","",56,null],[11,"build_item_kind","","",56,null],[11,"fn_","","",56,null],[11,"build_use","","",56,null],[11,"use_","","",56,null],[11,"struct_","","",56,null],[11,"unit_struct","","",56,null],[11,"tuple_struct","","",56,null],[11,"enum_","","",56,null],[11,"extern_crate","","",56,null],[11,"mac","","",56,null],[11,"type_","","",56,null],[11,"trait_","","",56,null],[11,"impl_","","",56,null],[11,"const_","","",56,null],[11,"invoke","","",56,null],[11,"invoke","","",57,null],[11,"unsafe_","","",58,null],[11,"const_","","",58,null],[11,"abi","","",58,null],[11,"generics","","",58,null],[11,"build","","",58,null],[11,"block","","",58,null],[11,"invoke","","",58,null],[11,"invoke","","",58,null],[11,"invoke","","",59,null],[11,"as_","","",60,null],[11,"build","","",60,null],[11,"glob","","",60,null],[11,"list","","",60,null],[11,"span","","",61,null],[11,"self_","","",61,null],[11,"id","","",61,null],[11,"build","","",61,null],[11,"with_generics","","",62,null],[11,"generics","","",62,null],[11,"with_fields","","",62,null],[11,"with_field","","",62,null],[11,"field","","",62,null],[11,"build","","",62,null],[11,"invoke","","",62,null],[11,"invoke","","",62,null],[11,"generics","","",63,null],[11,"with_tys","","",63,null],[11,"ty","","",63,null],[11,"field","","",63,null],[11,"build","","",63,null],[11,"invoke","","",63,null],[11,"invoke","","",63,null],[11,"invoke","","",63,null],[11,"generics","","",64,null],[11,"with_variants","","",64,null],[11,"with_variant","","",64,null],[11,"with_variant_","","",64,null],[11,"ids","","",64,null],[11,"id","","",64,null],[11,"tuple","","",64,null],[11,"struct_","","",64,null],[11,"variant","","",64,null],[11,"build","","",64,null],[11,"invoke","","",64,null],[11,"invoke","","",64,null],[11,"with_name","","",65,null],[11,"build","","",65,null],[11,"path","","",66,null],[11,"build","","",66,null],[11,"invoke","","",66,null],[11,"invoke","","",66,null],[11,"generics","","",67,null],[11,"ty","","",67,null],[11,"build_ty","","",67,null],[11,"invoke","","",67,null],[11,"invoke","","",67,null],[11,"unsafe_","","",68,null],[11,"with_generics","","",68,null],[11,"generics","","",68,null],[11,"with_bounds","","",68,null],[11,"with_bound","","",68,null],[11,"bound","","",68,null],[11,"with_items","","",68,null],[11,"with_item","","",68,null],[11,"item","","",68,null],[11,"const_","","",68,null],[11,"method","","",68,null],[11,"type_","","",68,null],[11,"build","","",68,null],[11,"invoke","","",68,null],[11,"invoke","","",68,null],[11,"invoke","","",68,null],[11,"new","","",69,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",69,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",69,null],[11,"with_attrs","","",69,null],[11,"with_attr","","",69,null],[11,"attr","","",69,null],[11,"const_","","",69,null],[11,"method","","",69,null],[11,"type_","","",69,null],[11,"build_item","","",69,null],[11,"invoke","","",69,null],[11,"invoke","","",69,null],[11,"invoke","","",69,null],[11,"build_option_block","","",70,null],[11,"build_block","","",70,null],[11,"build","","",70,null],[11,"invoke","","",70,null],[11,"with_bounds","","",71,null],[11,"with_bound","","",71,null],[11,"bound","","",71,null],[11,"build_option_ty","","",71,null],[11,"build_ty","","",71,null],[11,"ty","","",71,null],[11,"build","","",71,null],[11,"invoke","","",71,null],[11,"invoke","","",71,null],[11,"unsafe_","","",72,null],[11,"negative","","",72,null],[11,"with_generics","","",72,null],[11,"generics","","",72,null],[11,"with_trait","","",72,null],[11,"trait_","","",72,null],[11,"ty","","",72,null],[11,"build_ty","","",72,null],[11,"with_items","","",72,null],[11,"with_item","","",72,null],[11,"item","","",72,null],[11,"const_","","",72,null],[11,"method","","",72,null],[11,"type_","","",72,null],[11,"invoke","","",72,null],[11,"invoke","","",72,null],[11,"invoke","","",72,null],[11,"invoke","","",72,null],[11,"new","","",73,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",73,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",73,null],[11,"with_attrs","","",73,null],[11,"with_attr","","",73,null],[11,"attr","","",73,null],[11,"pub_","","",73,null],[11,"default","","",73,null],[11,"const_","","",73,null],[11,"build_method","","",73,null],[11,"method","","",73,null],[11,"type_","","",73,null],[11,"mac","","",73,null],[11,"build_item","","",73,null],[11,"invoke","","",73,null],[11,"invoke","","",73,null],[11,"invoke","","",73,null],[11,"invoke","","",73,null],[11,"invoke","","",73,null],[11,"build_block","","",74,null],[11,"block","","",74,null],[11,"invoke","","",74,null],[11,"invoke","","",75,null],[0,"lifetime","aster","",null,null],[3,"LifetimeDefBuilder","aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",76,null],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",77,null],[11,"into_lifetime","syntax::ast","",78,null],[11,"into_lifetime_def","","",79,null],[11,"into_lifetime_def","","",78,null],[11,"into_lifetime_def","collections::string","",53,null],[11,"new","aster::lifetime","",80,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",80,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",80,null],[11,"build","","",80,null],[0,"lit","aster","",null,null],[3,"LitBuilder","aster::lit","",null,null],[11,"new","","",81,{"inputs":[],"output":{"name":"litbuilder"}}],[11,"with_callback","","",81,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",81,null],[11,"build_lit","","",81,null],[11,"bool","","",81,null],[11,"true_","","",81,null],[11,"false_","","",81,null],[11,"int","","",81,null],[11,"isize","","",81,null],[11,"i8","","",81,null],[11,"i16","","",81,null],[11,"i32","","",81,null],[11,"i64","","",81,null],[11,"uint","","",81,null],[11,"usize","","",81,null],[11,"u8","","",81,null],[11,"u16","","",81,null],[11,"u32","","",81,null],[11,"u64","","",81,null],[11,"f32","","",81,null],[11,"f64","","",81,null],[11,"char","","",81,null],[11,"byte","","",81,null],[11,"str","","",81,null],[11,"byte_str","","",81,null],[0,"mac","aster","",null,null],[3,"MacBuilder","aster::mac","A Builder for macro invocations.",null,null],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",82,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",82,null],[11,"path","","",82,null],[11,"build","","",82,null],[11,"with_args","","",82,null],[11,"with_arg","","",82,null],[11,"expr","","",82,null],[11,"invoke","","",82,null],[0,"method","aster","",null,null],[3,"MethodSigBuilder","aster::method","",null,null],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",83,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",83,null],[11,"unsafe_","","",83,null],[11,"const_","","",83,null],[11,"abi","","",83,null],[11,"with_generics","","",83,null],[11,"generics","","",83,null],[11,"build_fn_decl","","",83,null],[11,"fn_decl","","",83,null],[11,"invoke","","",83,null],[11,"invoke","","",83,null],[0,"name","aster","",null,null],[8,"ToName","aster::name","",null,null],[10,"to_name","","",84,null],[11,"to_name","syntax::ast","",52,null],[0,"pat","aster","",null,null],[3,"PatBuilder","aster::pat","",null,null],[3,"PatRangeBuilder","","",null,null],[3,"PatRangeExprBuilder","","",null,null],[3,"PatEnumBuilder","","",null,null],[3,"PatEnumPathBuilder","","",null,null],[3,"PatStructBuilder","","",null,null],[3,"PatStructPathBuilder","","",null,null],[3,"PatStructFieldBuilder","","",null,null],[3,"PatExprBuilder","","",null,null],[3,"PatTupleBuilder","","",null,null],[11,"new","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",85,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",85,null],[11,"build","","",85,null],[11,"build_pat_kind","","",85,null],[11,"wild","","",85,null],[11,"build_id","","",85,null],[11,"id","","",85,null],[11,"mut_id","","",85,null],[11,"ref_id","","",85,null],[11,"ref_mut_id","","",85,null],[11,"enum_","","",85,null],[11,"struct_","","",85,null],[11,"expr","","",85,null],[11,"build_path","","",85,null],[11,"build_qpath","","",85,null],[11,"path","","",85,null],[11,"qpath","","",85,null],[11,"build_range","","",85,null],[11,"range","","",85,null],[11,"tuple","","",85,null],[11,"invoke","","",85,null],[11,"invoke","","",85,null],[11,"invoke","","",86,null],[11,"invoke","","",87,null],[11,"invoke","","",88,null],[11,"with_pats","","",89,null],[11,"pat","","",89,null],[11,"with_ids","","",89,null],[11,"id","","",89,null],[11,"wild","","",89,null],[11,"build","","",89,null],[11,"invoke","","",89,null],[11,"invoke","","",90,null],[11,"with_field_pat","","",91,null],[11,"with_pats","","",91,null],[11,"pat","","",91,null],[11,"with_ids","","",91,null],[11,"mut_id","","",91,null],[11,"id","","",91,null],[11,"etc","","",91,null],[11,"build","","",91,null],[11,"invoke","","",92,null],[11,"invoke","","",93,null],[11,"with_pats","","",94,null],[11,"with_pat","","",94,null],[11,"pat","","",94,null],[11,"wild","","",94,null],[11,"build","","",94,null],[11,"invoke","","",94,null],[0,"path","aster","",null,null],[3,"PathBuilder","aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",95,null],[11,"into_path","syntax::ast","",96,null],[11,"into_path","","",51,null],[11,"into_path","collections::string","",53,null],[11,"new","aster::path","",97,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",97,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",97,null],[11,"span","","Update the span to start from this location.",97,null],[11,"global","","",97,null],[11,"ids","","",97,null],[11,"id","","",97,null],[11,"segment","","",97,null],[11,"ids","","",98,null],[11,"id","","",98,null],[11,"segment","","",98,null],[11,"build","","",98,null],[11,"invoke","","",98,null],[11,"with_callback","","",99,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",99,null],[11,"with_generics","","",99,null],[11,"with_lifetimes","","",99,null],[11,"with_lifetime","","",99,null],[11,"lifetime","","",99,null],[11,"with_tys","","",99,null],[11,"with_ty","","",99,null],[11,"ty","","",99,null],[11,"with_binding","","",99,null],[11,"binding","","",99,null],[11,"build","","",99,null],[11,"invoke","","",99,null],[11,"invoke","","",100,null],[0,"qpath","aster","",null,null],[3,"QPathBuilder","aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `ast::QSelf`\nand `ast::Path`.",101,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","Update the span to start from this location.",101,null],[11,"with_ty","","Build a qualified path first by starting with a type builder.",101,null],[11,"ty","","Build a qualified path first by starting with a type builder.",101,null],[11,"build","","Build a qualified path with a concrete type and path.",101,null],[11,"invoke","","",101,null],[11,"as_","","Build a qualified path with a path builder.",102,null],[11,"id","","",102,null],[11,"segment","","",102,null],[11,"invoke","","",102,null],[11,"id","","",103,null],[11,"segment","","",103,null],[11,"invoke","","",103,null],[0,"self_","aster","",null,null],[3,"SelfBuilder","aster::self_","",null,null],[11,"new","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",104,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",104,null],[11,"span","","",104,null],[11,"mut_","","",104,null],[11,"value","","",104,null],[11,"ref_","","",104,null],[11,"ref_lifetime","","",104,null],[11,"ty","","",104,null],[11,"invoke","","",104,null],[0,"stmt","aster","",null,null],[3,"StmtBuilder","aster::stmt","",null,null],[3,"StmtLetIdBuilder","","",null,null],[3,"StmtExprBuilder","","",null,null],[3,"StmtSemiBuilder","","",null,null],[3,"StmtLetBuilder","","",null,null],[3,"StmtLetTyBuilder","","",null,null],[3,"StmtItemBuilder","","",null,null],[11,"new","","",105,{"inputs":[],"output":{"name":"stmtbuilder"}}],[11,"with_callback","","",105,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",105,null],[11,"span","","",105,null],[11,"build_stmt_kind","","",105,null],[11,"build_let","","",105,null],[11,"let_","","",105,null],[11,"let_id","","",105,null],[11,"build_expr","","",105,null],[11,"expr","","",105,null],[11,"semi","","",105,null],[11,"build_item","","",105,null],[11,"item","","",105,null],[11,"invoke","","",105,null],[11,"invoke","","",106,null],[11,"invoke","","",107,null],[11,"invoke","","",108,null],[11,"ty","","",109,null],[11,"build_expr","","",109,null],[11,"expr","","",109,null],[11,"build","","",109,null],[11,"invoke","","",109,null],[11,"invoke","","",109,null],[11,"expr","","",110,null],[11,"build","","",110,null],[11,"invoke","","",110,null],[11,"invoke","","",111,null],[0,"str","aster","",null,null],[8,"ToInternedString","aster::str","",null,null],[10,"to_interned_string","","",112,null],[11,"to_interned_string","syntax::parse::token","",113,null],[11,"to_interned_string","syntax::ast","",51,null],[11,"to_interned_string","","",52,null],[0,"struct_field","aster","",null,null],[3,"StructFieldBuilder","aster::struct_field","",null,null],[11,"named","","",114,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unnamed","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"named_with_callback","","",114,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"unnamed_with_callback","","",114,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",114,null],[11,"pub_","","",114,null],[11,"with_attrs","","",114,null],[11,"attr","","",114,null],[11,"build_ty","","",114,null],[11,"ty","","",114,null],[11,"invoke","","",114,null],[11,"invoke","","",114,null],[0,"ty","aster","",null,null],[3,"TyBuilder","aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyObjectSumBuilder","","",null,null],[3,"TyObjectSumTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",115,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",115,null],[11,"span","","",115,null],[11,"build_ty_kind","","",115,null],[11,"id","","",115,null],[11,"build_path","","",115,null],[11,"build_qpath","","",115,null],[11,"path","","",115,null],[11,"qpath","","",115,null],[11,"isize","","",115,null],[11,"i8","","",115,null],[11,"i16","","",115,null],[11,"i32","","",115,null],[11,"i64","","",115,null],[11,"usize","","",115,null],[11,"u8","","",115,null],[11,"u16","","",115,null],[11,"u32","","",115,null],[11,"u64","","",115,null],[11,"f32","","",115,null],[11,"f64","","",115,null],[11,"bool","","",115,null],[11,"unit","","",115,null],[11,"tuple","","",115,null],[11,"build_slice","","",115,null],[11,"slice","","",115,null],[11,"ref_","","",115,null],[11,"infer","","",115,null],[11,"option","","",115,null],[11,"result","","",115,null],[11,"phantom_data","","",115,null],[11,"box_","","",115,null],[11,"iterator","","",115,null],[11,"object_sum","","",115,null],[11,"invoke","","",116,null],[11,"invoke","","",117,null],[11,"invoke","","",118,null],[11,"mut_","","",119,null],[11,"lifetime","","",119,null],[11,"build_ty","","",119,null],[11,"ty","","",119,null],[11,"invoke","","",119,null],[11,"invoke","","",120,null],[11,"invoke","","",121,null],[11,"invoke","","",122,null],[11,"invoke","","",123,null],[11,"invoke","","",124,null],[11,"invoke","","",125,null],[11,"invoke","","",126,null],[11,"with_bounds","","",127,null],[11,"with_bound","","",127,null],[11,"bound","","",127,null],[11,"with_generics","","",127,null],[11,"with_lifetimes","","",127,null],[11,"lifetime","","",127,null],[11,"build","","",127,null],[11,"invoke","","",127,null],[11,"with_tys","","",128,null],[11,"with_ty","","",128,null],[11,"ty","","",128,null],[11,"build","","",128,null],[11,"invoke","","",128,null],[0,"ty_param","aster","",null,null],[3,"TyParamBuilder","aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",129,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",129,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",129,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",129,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"span","","",129,null],[11,"with_default","","",129,null],[11,"default","","",129,null],[11,"with_bound","","",129,null],[11,"bound","","",129,null],[11,"with_trait_bound","","",129,null],[11,"trait_bound","","",129,null],[11,"lifetime_bound","","",129,null],[11,"build","","",129,null],[11,"invoke","","",129,null],[11,"invoke","","",129,null],[11,"invoke","","",129,null],[11,"new","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",130,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",130,null],[11,"build_trait","","",130,null],[11,"trait_","","",130,null],[11,"maybe_trait","","",130,null],[11,"lifetime","","",130,null],[11,"invoke","","",131,null],[11,"with_callback","","",132,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",132,null],[11,"with_lifetime","","",132,null],[11,"lifetime","","",132,null],[11,"build","","",132,null],[11,"invoke","","",132,null],[0,"variant","aster","",null,null],[3,"VariantBuilder","aster::variant","",null,null],[11,"new","","",133,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",133,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",133,null],[11,"attr","","",133,null],[11,"unit","","",133,null],[11,"tuple","","",133,null],[11,"struct_","","",133,null],[11,"build_variant_data","","",133,null],[11,"build_variant_","","",133,null],[11,"build","","",133,null],[11,"invoke","","",133,null],[11,"invoke","","",133,null],[0,"variant_data","aster","",null,null],[3,"VariantDataBuilder","aster::variant_data","",null,null],[3,"VariantDataTupleBuilder","","",null,null],[3,"VariantDataStructBuilder","","",null,null],[11,"new","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",134,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",134,null],[11,"tuple","","",134,null],[11,"struct_","","",134,null],[11,"unit","","",134,null],[11,"with_fields","","",135,null],[11,"with_field","","",135,null],[11,"field","","",135,null],[11,"with_ty","","",135,null],[11,"ty","","",135,null],[11,"build","","",135,null],[11,"invoke","","",135,null],[11,"invoke","","",135,null],[11,"with_fields","","",136,null],[11,"with_field","","",136,null],[11,"field","","",136,null],[11,"build","","",136,null],[11,"invoke","","",136,null],[0,"where_predicate","aster","",null,null],[3,"WherePredicateBuilder","aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[3,"WhereEqPredicateBuilder","","",null,null],[11,"new","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",137,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",137,null],[11,"bound","","",137,null],[11,"lifetime","","",137,null],[11,"eq","","",137,null],[11,"invoke","","",137,null],[11,"invoke","","",138,null],[11,"with_for_lifetime","","",139,null],[11,"for_lifetime","","",139,null],[11,"with_bound","","",139,null],[11,"bound","","",139,null],[11,"trait_","","",139,null],[11,"lifetime","","",139,null],[11,"invoke","","",139,null],[11,"invoke","","",139,null],[11,"with_for_lifetime","","",140,null],[11,"for_lifetime","","",140,null],[11,"with_bound","","",140,null],[11,"bound","","",140,null],[11,"trait_","","",140,null],[11,"lifetime","","",140,null],[11,"build","","",140,null],[11,"invoke","","",140,null],[11,"invoke","","",140,null],[11,"bound","","",141,null],[11,"build","","",141,null],[11,"ty","","",142,null],[11,"build_ty","","",142,null],[11,"invoke","","",142,null],[11,"clone","aster","",143,null],[11,"new","","",143,{"inputs":[],"output":{"name":"astbuilder"}}],[11,"span","","",143,null],[11,"interned_string","","",143,null],[11,"id","","",143,null],[11,"name","","",143,null],[11,"lifetime","","",143,null],[11,"arm","","",143,null],[11,"attr","","",143,null],[11,"path","","",143,null],[11,"qpath","","",143,null],[11,"ty","","",143,null],[11,"lifetime_def","","",143,null],[11,"ty_param","","",143,null],[11,"ty_param_bound","","",143,null],[11,"from_ty_param","","",143,null],[11,"generics","","",143,null],[11,"where_predicate","","",143,null],[11,"from_generics","","",143,null],[11,"lit","","",143,null],[11,"expr","","",143,null],[11,"stmt","","",143,null],[11,"block","","",143,null],[11,"pat","","",143,null],[11,"fn_decl","","",143,null],[11,"method_sig","","",143,null],[11,"self_","","",143,null],[11,"arg","","",143,null],[11,"variant_data","","",143,null],[11,"variant","","",143,null],[11,"struct_field","","",143,null],[11,"tuple_field","","",143,null],[11,"item","","",143,null],[11,"trait_item","","",143,null],[11,"impl_item","","",143,null],[11,"const_","","",143,null],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"ArmBuilder"],[3,"ArmPatBuilder"],[3,"ArmBodyBuilder"],[3,"AttrBuilder"],[3,"AttrListBuilder"],[3,"AttrNameValueBuilder"],[3,"BlockBuilder"],[3,"Const"],[3,"ConstBuilder"],[3,"ExprBuilder"],[3,"ExprUnaryBuilder"],[3,"ExprBinaryLhsBuilder"],[3,"ExprBinaryRhsBuilder"],[3,"ExprReturnBuilder"],[3,"ExprTupleBuilder"],[3,"ExprStructBuilder"],[3,"ExprStructPathBuilder"],[3,"ExprStructFieldBuilder"],[3,"ExprCallBuilder"],[3,"ExprCallArgsBuilder"],[3,"ExprMethodCallBuilder"],[3,"ExprMethodCallArgsBuilder"],[3,"ExprRefBuilder"],[3,"ExprPathBuilder"],[3,"ExprAssignBuilder"],[3,"ExprAssignLhsBuilder"],[3,"ExprAssignOpBuilder"],[3,"ExprAssignOpLhsBuilder"],[3,"ExprIndexBuilder"],[3,"ExprIndexLhsBuilder"],[3,"ExprRepeatBuilder"],[3,"ExprRepeatLhsBuilder"],[3,"ExprLoopBuilder"],[3,"ExprIfBuilder"],[3,"ExprIfThenBuilder"],[3,"ExprIfThenElseBuilder"],[3,"ExprElseIfBuilder"],[3,"ExprElseIfThenBuilder"],[3,"ExprMatchBuilder"],[3,"ExprMatchArmBuilder"],[3,"ExprParenBuilder"],[3,"ExprFieldBuilder"],[3,"ExprTupFieldBuilder"],[3,"ExprSliceBuilder"],[3,"ExprVecBuilder"],[3,"ExprTryBuilder"],[3,"FnDeclBuilder"],[3,"ArgBuilder"],[3,"ArgPatBuilder"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[3,"Name"],[3,"String"],[8,"Invoke"],[3,"Identity"],[3,"ItemBuilder"],[3,"ItemFnDeclBuilder"],[3,"ItemFnBuilder"],[3,"ItemUseBuilder"],[3,"ItemUsePathBuilder"],[3,"ItemUsePathListBuilder"],[3,"ItemStructBuilder"],[3,"ItemTupleStructBuilder"],[3,"ItemEnumBuilder"],[3,"ItemExternCrateBuilder"],[3,"ItemMacBuilder"],[3,"ItemTyBuilder"],[3,"ItemTraitBuilder"],[3,"ItemTraitItemBuilder"],[3,"ItemTraitMethodBuilder"],[3,"ItemTraitTypeBuilder"],[3,"ItemImplBuilder"],[3,"ItemImplItemBuilder"],[3,"ItemImplMethodBuilder"],[3,"ItemConstBuilder"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"LifetimeDefBuilder"],[3,"LitBuilder"],[3,"MacBuilder"],[3,"MethodSigBuilder"],[8,"ToName"],[3,"PatBuilder"],[3,"PatRangeBuilder"],[3,"PatRangeExprBuilder"],[3,"PatEnumBuilder"],[3,"PatEnumPathBuilder"],[3,"PatStructBuilder"],[3,"PatStructPathBuilder"],[3,"PatStructFieldBuilder"],[3,"PatExprBuilder"],[3,"PatTupleBuilder"],[8,"IntoPath"],[3,"Path"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"SelfBuilder"],[3,"StmtBuilder"],[3,"StmtLetIdBuilder"],[3,"StmtExprBuilder"],[3,"StmtSemiBuilder"],[3,"StmtLetBuilder"],[3,"StmtLetTyBuilder"],[3,"StmtItemBuilder"],[8,"ToInternedString"],[3,"InternedString"],[3,"StructFieldBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyObjectSumBuilder"],[3,"TyObjectSumTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"VariantBuilder"],[3,"VariantDataBuilder"],[3,"VariantDataTupleBuilder"],[3,"VariantDataStructBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"WhereEqPredicateBuilder"],[3,"AstBuilder"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["quasi"] = {"doc":"","items":[[3,"IterWrapper","quasi","",null,null],[3,"ZipLockstep","","",null,null],[5,"parse_expr_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[8,"ToTokens","","",null,null],[10,"to_tokens","","",0,null],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",1,null],[10,"parse_expr","","",1,null],[10,"parse_stmt","","",1,null],[10,"parse_tts","","",1,null],[8,"IntoWrappedIterator","","",null,null],[16,"Item","","",2,null],[16,"IntoIter","","",2,null],[10,"into_wrappable_iter","","",2,null],[11,"into_wrapped_iter","","",2,null],[8,"IntoWrappedRepeat","","",null,null],[16,"Item","","",3,null],[16,"IntoIter","","",3,null],[10,"into_wrappable_iter","","",3,null],[11,"into_wrapped_iter","","",3,null],[11,"to_tokens","syntax::ast","",4,null],[11,"to_tokens","collections::vec","",5,null],[11,"to_tokens","syntax::codemap","",6,null],[11,"to_tokens","core::option","",7,null],[11,"to_tokens","syntax::ast","",8,null],[11,"to_tokens","","",9,null],[11,"to_tokens","","",10,null],[11,"to_tokens","syntax::ptr","",11,null],[11,"to_tokens","","",11,null],[11,"to_tokens","","",11,null],[11,"to_tokens","","",11,null],[11,"to_tokens","","",11,null],[11,"to_tokens","syntax::ast","",12,null],[11,"to_tokens","","",13,null],[11,"to_tokens","quasi","",14,null],[11,"to_tokens","syntax::ptr","",11,null],[11,"to_tokens","","",11,null],[11,"to_tokens","syntax::ast","",15,null],[11,"to_tokens","syntax::ptr","",11,null],[11,"to_tokens","quasi","",16,null],[11,"to_tokens","","",17,null],[11,"parse_item","syntax::ext::base","",18,null],[11,"parse_stmt","","",18,null],[11,"parse_expr","","",18,null],[11,"parse_tts","","",18,null],[11,"zip_wrap","quasi","",19,null],[11,"check","","",19,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"into_wrappable_iter","syntax::codemap","",6,null],[11,"into_wrappable_iter","syntax::ast","",4,null],[11,"into_wrappable_iter","","",8,null],[11,"into_wrappable_iter","","",9,null],[11,"into_wrappable_iter","","",10,null],[11,"into_wrappable_iter","syntax::ptr","",11,null],[11,"into_wrappable_iter","","",11,null],[11,"into_wrappable_iter","","",11,null],[11,"into_wrappable_iter","","",11,null],[11,"into_wrappable_iter","","",11,null],[11,"into_wrappable_iter","syntax::ast","",12,null],[11,"into_wrappable_iter","","",13,null],[11,"into_wrappable_iter","","",21,null],[11,"into_wrappable_iter","syntax::ptr","",11,null],[11,"into_wrappable_iter","","",11,null],[11,"into_wrappable_iter","syntax::ast","",15,null],[11,"into_wrappable_iter","syntax::ptr","",11,null],[11,"into_wrappable_iter","syntax::ast","",22,null],[11,"into_wrappable_iter","","",23,null]],"paths":[[8,"ToTokens"],[8,"ExtParseUtils"],[8,"IntoWrappedIterator"],[8,"IntoWrappedRepeat"],[4,"TokenTree"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"Ident"],[3,"Path"],[3,"Ty"],[3,"P"],[3,"Generics"],[3,"WhereClause"],[6,"Stmt"],[3,"Arm"],[6,"Attribute"],[6,"Lit"],[3,"ExtCtxt"],[3,"IterWrapper"],[3,"ZipLockstep"],[4,"StmtKind"],[3,"Attribute_"],[4,"LitKind"]]};
searchIndex["serde_item"] = {"doc":"","items":[[3,"Item","serde_item","",null,null],[12,"ident","","",0,null],[12,"span","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"span","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"span","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Error","","",null,null],[13,"UnexpectedItemKind","","",3,null],[4,"Body","","",null,null],[13,"Enum","","",4,null],[13,"Struct","","",4,null],[4,"Style","","",null,null],[13,"Struct","","",5,null],[13,"Tuple","","",5,null],[13,"Newtype","","",5,null],[13,"Unit","","",5,null],[0,"attr","","",null,null],[3,"Name","serde_item::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"FieldDefault","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",6,null],[13,"Default","","The default is given by `std::default::Default::default()`.",6,null],[13,"Path","","The default is given by this function.",6,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",7,null],[11,"serialize_name","","Return the container name for the container when serializing.",7,null],[11,"deserialize_name","","Return the container name for the container when deserializing.",7,null],[11,"fmt","","",8,null],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",8,{"inputs":[{"name":"extctxt"},{"name":"item"}],"output":{"name":"self"}}],[11,"name","","",8,null],[11,"deny_unknown_fields","","",8,null],[11,"ser_bound","","",8,null],[11,"de_bound","","",8,null],[11,"fmt","","",9,null],[11,"from_ast","","",9,{"inputs":[{"name":"extctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",9,null],[11,"fmt","","",10,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",10,{"inputs":[{"name":"extctxt"},{"name":"usize"},{"name":"structfield"}],"output":{"name":"self"}}],[11,"name","","",10,null],[11,"skip_serializing","","",10,null],[11,"skip_deserializing","","",10,null],[11,"skip_serializing_if","","",10,null],[11,"default","","",10,null],[11,"serialize_with","","",10,null],[11,"deserialize_with","","",10,null],[11,"ser_bound","","",10,null],[11,"de_bound","","",10,null],[11,"fmt","serde_item","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"from_ast","","",0,{"inputs":[{"name":"extctxt"},{"name":"item"}],"output":{"name":"result"}}],[11,"all_fields","","",4,null]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Error"],[4,"Body"],[4,"Style"],[4,"FieldDefault"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"]]};
initSearch(searchIndex);
